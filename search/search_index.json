{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started # Find a server for the language of your choice in the list of language servers and follow its setup instructions. Open a document in your chosen language - if the server starts successfully then its name will be shown on the left in the status bar. If you are having issues with starting the server, check the Troubleshooting section. About LSP # The Language Server Protocol is a specification about the communication protocol for use between text editors or IDEs and language servers - tools which provide language-specific features like autocomplete, go to definition, or documentation on hover. This LSP package acts as an interface between Sublime Text and the language servers, which means that to obtain these features you need to install a server for your language first. Language servers can be provided as standalone executables or might require a runtime environment like Node.js or Python. The list of language servers shows installation instructions and example configurations for several servers that have been tested and are known to work with the LSP package. Visit Langserver.org or the list of language server implementations maintained by Microsoft for a complete overview of available servers for various programming languages.","title":"Getting Started"},{"location":"#getting-started","text":"Find a server for the language of your choice in the list of language servers and follow its setup instructions. Open a document in your chosen language - if the server starts successfully then its name will be shown on the left in the status bar. If you are having issues with starting the server, check the Troubleshooting section.","title":"Getting started"},{"location":"#about-lsp","text":"The Language Server Protocol is a specification about the communication protocol for use between text editors or IDEs and language servers - tools which provide language-specific features like autocomplete, go to definition, or documentation on hover. This LSP package acts as an interface between Sublime Text and the language servers, which means that to obtain these features you need to install a server for your language first. Language servers can be provided as standalone executables or might require a runtime environment like Node.js or Python. The list of language servers shows installation instructions and example configurations for several servers that have been tested and are known to work with the LSP package. Visit Langserver.org or the list of language server implementations maintained by Microsoft for a complete overview of available servers for various programming languages.","title":"About LSP"},{"location":"customization/","text":"Hover popups # LSP uses mdpopups to display the popup. You can override its style by creating a Packages/User/mdpopups.css file. See the mdpopups documentation for more details. Color scheme customizations # Some features use TextMate scopes to control the colors (underline, background or text color) of styled regions in a document or popup. Colors can be customized by adding a rule for these scopes into your color scheme. There is an example in the official ST documentation which explains how to do that. The following tables give an overview about the scope names used by LSP. Document Highlights # This feature is only available if the server has the documentHighlightProvider capability. Highlights other occurrences of the symbol at a given cursor position. scope DocumentHighlightKind description markup.highlight.text.lsp Text A textual occurrence markup.highlight.read.lsp Read Read-access of a symbol, like reading a variable markup.highlight.write.lsp Write Write-access of a symbol, like writing to a variable Note If document_highlight_style is set to \"fill\" in the LSP settings, the highlighting color can be controlled via the \"background\" color from a color scheme rule for the listed scopes. Diagnostics # scope DiagnosticSeverity description markup.error.lsp Error Reports an error markup.warning.lsp Warning Reports a warning markup.info.lsp Information Reports an information markup.info.hint.lsp Hint Reports a hint Note If diagnostics_highlight_style is set to \"fill\" in the LSP settings, the highlighting color can be controlled via the \"background\" color from a color scheme rule for the listed scopes. Diagnostics will also optionally include the following scopes: scope diagnostic tag name description markup.unnecessary.lsp Unnecessary Unused or unnecessary code markup.deprecated.lsp Deprecated Deprecated or obsolete code Note Regions created for those scopes don't follow the diagnostics_highlight_style setting and instead always use the \"fill\" style. Those scopes can be used to, for example, gray-out the text color of unused code, if the server supports that. For example, to add a custom rule for Mariana color scheme, select UI: Customize Color Scheme from the Command Palette and add the following rule: { \"rules\" : [ { \"scope\" : \"markup.unnecessary.lsp\" , \"foreground\" : \"color(rgb(255, 255, 255) alpha(0.4))\" , \"background\" : \"color(var(blue3) alpha(0.9))\" } ] } The color scheme rule only works if the \"background\" color is different from the global background of the scheme. So for other color schemes, ideally pick a background color that is as close as possible, but marginally different from the original background. Signature Help # scope description entity.name.function.sighelp.lsp Function name in the signature help popup variable.parameter.sighelp.lsp Function argument in the signature help popup Code Lens # scope description markup.codelens.accent Accent color for code lens annotations","title":"Customization"},{"location":"customization/#hover-popups","text":"LSP uses mdpopups to display the popup. You can override its style by creating a Packages/User/mdpopups.css file. See the mdpopups documentation for more details.","title":"Hover popups"},{"location":"customization/#color-scheme-customizations","text":"Some features use TextMate scopes to control the colors (underline, background or text color) of styled regions in a document or popup. Colors can be customized by adding a rule for these scopes into your color scheme. There is an example in the official ST documentation which explains how to do that. The following tables give an overview about the scope names used by LSP.","title":"Color scheme customizations"},{"location":"customization/#document-highlights","text":"This feature is only available if the server has the documentHighlightProvider capability. Highlights other occurrences of the symbol at a given cursor position. scope DocumentHighlightKind description markup.highlight.text.lsp Text A textual occurrence markup.highlight.read.lsp Read Read-access of a symbol, like reading a variable markup.highlight.write.lsp Write Write-access of a symbol, like writing to a variable Note If document_highlight_style is set to \"fill\" in the LSP settings, the highlighting color can be controlled via the \"background\" color from a color scheme rule for the listed scopes.","title":"Document Highlights"},{"location":"customization/#diagnostics","text":"scope DiagnosticSeverity description markup.error.lsp Error Reports an error markup.warning.lsp Warning Reports a warning markup.info.lsp Information Reports an information markup.info.hint.lsp Hint Reports a hint Note If diagnostics_highlight_style is set to \"fill\" in the LSP settings, the highlighting color can be controlled via the \"background\" color from a color scheme rule for the listed scopes. Diagnostics will also optionally include the following scopes: scope diagnostic tag name description markup.unnecessary.lsp Unnecessary Unused or unnecessary code markup.deprecated.lsp Deprecated Deprecated or obsolete code Note Regions created for those scopes don't follow the diagnostics_highlight_style setting and instead always use the \"fill\" style. Those scopes can be used to, for example, gray-out the text color of unused code, if the server supports that. For example, to add a custom rule for Mariana color scheme, select UI: Customize Color Scheme from the Command Palette and add the following rule: { \"rules\" : [ { \"scope\" : \"markup.unnecessary.lsp\" , \"foreground\" : \"color(rgb(255, 255, 255) alpha(0.4))\" , \"background\" : \"color(var(blue3) alpha(0.9))\" } ] } The color scheme rule only works if the \"background\" color is different from the global background of the scheme. So for other color schemes, ideally pick a background color that is as close as possible, but marginally different from the original background.","title":"Diagnostics"},{"location":"customization/#signature-help","text":"scope description entity.name.function.sighelp.lsp Function name in the signature help popup variable.parameter.sighelp.lsp Function argument in the signature help popup","title":"Signature Help"},{"location":"customization/#code-lens","text":"scope description markup.codelens.accent Accent color for code lens annotations","title":"Code Lens"},{"location":"features/","text":"Commands and shortcuts # Plugin commands # Restart Servers: kills all language servers belonging to the active window This command only works when in a supported document. It may change in the future to be always available, or only kill the relevant language server. LSP Settings: Opens package settings. Document actions # Show Code Actions: UNBOUND Symbol References: shift+f12 Rename Symbol: UNBOUND Recommendation: Override F2 (next bookmark) Go to definition / type definition / declaration / implementation: UNBOUND Recommendation: Override f12 (built-in goto definition), LSP falls back to ST3's built-in goto definition command in case LSP fails. Format Document: UNBOUND Format Selection: UNBOUND Document Symbols: UNBOUND Workspace actions # Show Diagnostics Panel: super+shift+M / ctr+alt+M Next/Previous Diagnostic From panel: F4 / shift+F4 Workspace Symbol Search: via command Palette LSP: workspace symbol Execute server commands # For LSP servers that can handle workspace/executeCommand , you can make these commands available in Sublime's Command Palette by adding an entry to your existing *.sublime-commands file or by creating a new one. Example: [ // ... { \"caption\" : \"Thread First\" , \"command\" : \"lsp_execute\" , \"args\" : { \"session_name\" : \"LSP-pyright\" , \"command_name\" : \"thread-first\" , \"command_args\" : [ \"${file_uri}\" , 0 , 0 ] } } ] Notes: the session_name is required and needs to match the server's key within the clients configuration object. the command_args is optional depending on the workspace/executeCommand that are supported by the LSP server. You can include special variables in the command_args array that will be automatically expanded. Supported variables include Sublime's built-in ones (see the full list in the Build Systems documentation) as well as additional variables listed below. Note that the built-in variables will be expanded regardless of where they are in the array and also within nested arrays or objects while the variables listed below will only be expanded in the top-level array values and only if those values match exactly (will not match if they are sub-strings of values): Variable Type Description \"$document_id\" or \"${document_id}\" object JSON object { 'uri': string } containing the file URI of the active view, see Document Identifier \"$file_uri\" or \"${file_uri}\" string File URI of the active view \"$selection\" or \"${selection}\" string Content of the (topmost) selection \"$offset\" or \"${offset}\" int Character offset of the (topmost) cursor position \"$selection_begin\" or \"${selection_begin}\" int Character offset of the begin of the (topmost) selection \"$selection_end\" or \"${selection_end}\" int Character offset of the end of the (topmost) selection \"$position\" or \"${position}\" object JSON object { 'line': int, 'character': int } of the (topmost) cursor position, see Position \"$range\" or \"${range}\" object JSON object with 'start' and 'end' positions of the (topmost) selection, see Range Overriding keybindings # LSP's keybindings can be edited from the Preferences: LSP Keybindings command from the command palette. There is a special context called lsp.session_with_capability that can check whether there is a language server active with the given LSP capability . Refer to the ServerCapabilities structure in that link. The following example overrides ctrl+r to use LSP's symbol provider when we're in a javascript or typescript view: { \"command\" : \"lsp_document_symbols\" , \"keys\" : [ \"ctrl+r\" ], \"context\" : [ { \"key\" : \"lsp.session_with_capability\" , \"operator\" : \"equal\" , \"operand\" : \"documentSymbolProvider\" }, { \"key\" : \"selector\" , \"operator\" : \"equal\" , \"operand\" : \"source.ts, source.js\" } ] }, More useful keybindings (OS-X), edit Package Settings -> LSP -> Key Bindings { \"keys\" : [ \"f2\" ], \"command\" : \"lsp_symbol_rename\" }, { \"keys\" : [ \"f12\" ], \"command\" : \"lsp_symbol_definition\" }, { \"keys\" : [ \"super+option+r\" ], \"command\" : \"lsp_document_symbols\" }, { \"keys\" : [ \"super+option+h\" ], \"command\" : \"lsp_hover\" } Show autocomplete documentation # Some completion items can have documentation associated with them. To show the documentation popup you can click the More link in the bottom of the autocomplete, or you can use the default sublime keybinding F12 to trigger it. You can change the default keybinding by remapping the command as below: { \"command\" : \"auto_complete_open_link\" , \"keys\" : [ \"f12\" ], \"context\" : [ { \"key\" : \"auto_complete_visible\" , \"operator\" : \"equal\" , \"operand\" : true } ] }, Note that F12 may conflict with your Goto Definition keybinding. To avoid the conflict, make sure that you have a context which checks that the AC widget is not visible: { \"command\" : \"lsp_symbol_definition\" , \"keys\" : [ \"f12\" ], \"context\" : [ { \"key\" : \"lsp.session_with_capability\" , \"operator\" : \"equal\" , \"operand\" : \"definitionProvider\" }, { \"key\" : \"auto_complete_visible\" , \"operator\" : \"equal\" , \"operand\" : false } ] }, There is an example of this in LSP's default keybindings. Mouse map configuration # See below link, but bind to lsp_symbol_definition command https://stackoverflow.com/questions/16235706/sublime-3-set-key-map-for-function-goto-definition","title":"Features"},{"location":"features/#commands-and-shortcuts","text":"","title":"Commands and shortcuts"},{"location":"features/#plugin-commands","text":"Restart Servers: kills all language servers belonging to the active window This command only works when in a supported document. It may change in the future to be always available, or only kill the relevant language server. LSP Settings: Opens package settings.","title":"Plugin commands"},{"location":"features/#document-actions","text":"Show Code Actions: UNBOUND Symbol References: shift+f12 Rename Symbol: UNBOUND Recommendation: Override F2 (next bookmark) Go to definition / type definition / declaration / implementation: UNBOUND Recommendation: Override f12 (built-in goto definition), LSP falls back to ST3's built-in goto definition command in case LSP fails. Format Document: UNBOUND Format Selection: UNBOUND Document Symbols: UNBOUND","title":"Document actions"},{"location":"features/#workspace-actions","text":"Show Diagnostics Panel: super+shift+M / ctr+alt+M Next/Previous Diagnostic From panel: F4 / shift+F4 Workspace Symbol Search: via command Palette LSP: workspace symbol","title":"Workspace actions"},{"location":"features/#execute-server-commands","text":"For LSP servers that can handle workspace/executeCommand , you can make these commands available in Sublime's Command Palette by adding an entry to your existing *.sublime-commands file or by creating a new one. Example: [ // ... { \"caption\" : \"Thread First\" , \"command\" : \"lsp_execute\" , \"args\" : { \"session_name\" : \"LSP-pyright\" , \"command_name\" : \"thread-first\" , \"command_args\" : [ \"${file_uri}\" , 0 , 0 ] } } ] Notes: the session_name is required and needs to match the server's key within the clients configuration object. the command_args is optional depending on the workspace/executeCommand that are supported by the LSP server. You can include special variables in the command_args array that will be automatically expanded. Supported variables include Sublime's built-in ones (see the full list in the Build Systems documentation) as well as additional variables listed below. Note that the built-in variables will be expanded regardless of where they are in the array and also within nested arrays or objects while the variables listed below will only be expanded in the top-level array values and only if those values match exactly (will not match if they are sub-strings of values): Variable Type Description \"$document_id\" or \"${document_id}\" object JSON object { 'uri': string } containing the file URI of the active view, see Document Identifier \"$file_uri\" or \"${file_uri}\" string File URI of the active view \"$selection\" or \"${selection}\" string Content of the (topmost) selection \"$offset\" or \"${offset}\" int Character offset of the (topmost) cursor position \"$selection_begin\" or \"${selection_begin}\" int Character offset of the begin of the (topmost) selection \"$selection_end\" or \"${selection_end}\" int Character offset of the end of the (topmost) selection \"$position\" or \"${position}\" object JSON object { 'line': int, 'character': int } of the (topmost) cursor position, see Position \"$range\" or \"${range}\" object JSON object with 'start' and 'end' positions of the (topmost) selection, see Range","title":"Execute server commands"},{"location":"features/#overriding-keybindings","text":"LSP's keybindings can be edited from the Preferences: LSP Keybindings command from the command palette. There is a special context called lsp.session_with_capability that can check whether there is a language server active with the given LSP capability . Refer to the ServerCapabilities structure in that link. The following example overrides ctrl+r to use LSP's symbol provider when we're in a javascript or typescript view: { \"command\" : \"lsp_document_symbols\" , \"keys\" : [ \"ctrl+r\" ], \"context\" : [ { \"key\" : \"lsp.session_with_capability\" , \"operator\" : \"equal\" , \"operand\" : \"documentSymbolProvider\" }, { \"key\" : \"selector\" , \"operator\" : \"equal\" , \"operand\" : \"source.ts, source.js\" } ] }, More useful keybindings (OS-X), edit Package Settings -> LSP -> Key Bindings { \"keys\" : [ \"f2\" ], \"command\" : \"lsp_symbol_rename\" }, { \"keys\" : [ \"f12\" ], \"command\" : \"lsp_symbol_definition\" }, { \"keys\" : [ \"super+option+r\" ], \"command\" : \"lsp_document_symbols\" }, { \"keys\" : [ \"super+option+h\" ], \"command\" : \"lsp_hover\" }","title":"Overriding keybindings"},{"location":"features/#show-autocomplete-documentation","text":"Some completion items can have documentation associated with them. To show the documentation popup you can click the More link in the bottom of the autocomplete, or you can use the default sublime keybinding F12 to trigger it. You can change the default keybinding by remapping the command as below: { \"command\" : \"auto_complete_open_link\" , \"keys\" : [ \"f12\" ], \"context\" : [ { \"key\" : \"auto_complete_visible\" , \"operator\" : \"equal\" , \"operand\" : true } ] }, Note that F12 may conflict with your Goto Definition keybinding. To avoid the conflict, make sure that you have a context which checks that the AC widget is not visible: { \"command\" : \"lsp_symbol_definition\" , \"keys\" : [ \"f12\" ], \"context\" : [ { \"key\" : \"lsp.session_with_capability\" , \"operator\" : \"equal\" , \"operand\" : \"definitionProvider\" }, { \"key\" : \"auto_complete_visible\" , \"operator\" : \"equal\" , \"operand\" : false } ] }, There is an example of this in LSP's default keybindings.","title":"Show autocomplete documentation"},{"location":"features/#mouse-map-configuration","text":"See below link, but bind to lsp_symbol_definition command https://stackoverflow.com/questions/16235706/sublime-3-set-key-map-for-function-goto-definition","title":"Mouse map configuration"},{"location":"language_servers/","text":"Language Servers # Follow the setup steps for a language server to get it up and running. If you encounter problems, consult the common issues page or search the LSP issues before opening new ones. If there are no setup steps for a language server on this page, but a language server implementation exist, follow the guide for creating a client configuration . Pull requests for adding a new client configuration are welcome. We recommend installing LSP-json . LSP-json provides completions and diagnostics when editing JSON files that adhere to a JSON schema. Angular # Follow installation instructions on LSP-angular . Bash # Follow installation instructions on LSP-bash . C/C++ # See the dedicated C/C++ guide for using ccls or clangd. C# # Download a .NET SDK. The \".NET Core\" SDK is known to not work on macOS. If on macOS/Linux, download the Mono Runtime in order to be able to run .NET executables and DLLs. Download omnisharp . Open Preferences > Package Settings > LSP > Settings and add the \"omnisharp\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"omnisharp\" : { \"enabled\" : true , \"command\" : [ \"mono\" , // mo n o is o nl y ne cessary f or macOS/Li nu x \"/home/tb/prebuilt/omnisharp/OmniSharp.exe\" , \"-lsp\" ], \"env\" : { // This may or may n o t be ne cessary , please repor t your f i n di n gs! \"FrameworkPathOverride\" : \"/path/to/omnisharp/.msbuild/Current\" }, \"selector\" : \"source.cs\" } } } Sublime Text 3 { \"clients\" : { \"omnisharp\" : { \"enabled\" : true , \"command\" : [ \"mono\" , // mo n o is o nl y ne cessary f or macOS/Li nu x \"/home/tb/prebuilt/omnisharp/OmniSharp.exe\" , \"-lsp\" ], \"env\" : { // This may or may n o t be ne cessary , please repor t your f i n di n gs! \"FrameworkPathOverride\" : \"/path/to/omnisharp/.msbuild/Current\" }, \"languageId\" : \"csharp\" , \"scopes\" : [ \"source.cs\" ], \"syntaxes\" : [ \"Packages/C#/C#.sublime-syntax\" ] } } } Clojure # Download clojure-lsp . Open Preferences > Package Settings > LSP > Settings and add the \"clojure-lsp\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"clojure-lsp\" : { \"enabled\" : true , \"command\" : [ \"java\" , \"-jar\" , \"/PATH/TO/clojure-lsp\" ], // Upda te t he PATH \"selector\" : \"source.clojure\" , \"initializationOptions\" : {} } } } Sublime Text 3 { \"clients\" : { \"clojure-lsp\" : { \"enabled\" : true , \"command\" : [ \"java\" , \"-jar\" , \"/PATH/TO/clojure-lsp\" ], // Upda te t he PATH \"languageId\" : \"clojure\" , \"scopes\" : [ \"source.clojure\" ], \"syntaxes\" : [ \"Packages/Clojure/Clojure.sublime-syntax\" ], \"initializationOptions\" : {} } } } See available initializationOptions . CSS # Follow installation instructions on LSP-css . D # Install the D Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"dls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"dls\" : { \"enabled\" : true , \"command\" : [ \"/PATH/TO/DLS_EXECUTABLE\" ], // Upda te t he PATH \"selector\" : \"source.d\" } } } Sublime Text 3 { \"clients\" : { \"dls\" : { \"enabled\" : true , \"command\" : [ \"/PATH/TO/DLS_EXECUTABLE\" ], // Upda te t he PATH \"languageId\" : \"d\" , \"scopes\" : [ \"source.d\" ], \"syntaxes\" : [ \"Packages/D/D.sublime-syntax\" ] } } } Dart # Follow installation instructions on LSP-Dart . Dockerfile # Follow installation instructions on LSP-dockerfile . Elixir # Follow installation instructions on LSP-elixir . Elm # Follow installation instructions on LSP-elm . Erlang # Install the Erlang Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"erlang-ls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"erlang-ls\" : { \"enabled\" : true , \"command\" : [ \"/PATH/TO/erlang_ls\" , \"--transport\" , \"stdio\" ], // Upda te t he PATH \"selector\" : \"source.erlang\" } } } Sublime Text 3 { \"clients\" : { \"erlang-ls\" : { \"enabled\" : true , \"command\" : [ \"/path/to/my/erlang_ls\" , \"--transport\" , \"stdio\" ], \"languageId\" : \"erlang\" , \"scopes\" : [ \"source.erlang\" ], \"syntaxes\" : [ \"Packages/Erlang/Erlang.sublime-syntax\" ] } } } ESLint # Follow installation instructions on LSP-eslint . Flow # Install flow . Open Preferences > Package Settings > LSP > Settings and add the \"flow\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"flow\" : { \"enabled\" : true , \"command\" : [ \"flow\" , \"lsp\" ], \"selector\" : \"source.js | source.js.react\" } } } Sublime Text 3 { \"clients\" : { \"flow\" : { \"enabled\" : true , \"command\" : [ \"flow\" , \"lsp\" ], \"languageId\" : \"javascript\" , \"scopes\" : [ \"source.js\" ], \"syntaxes\" : [ \"Packages/Babel/JavaScript (Babel).sublime-syntax\" , \"Packages/JavaScript/JavaScript.sublime-syntax\" ] } } } Fortran # Install the Fortran package from Package Control for syntax highlighting. Install the Fortran Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"fortls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"fortls\" : { \"enabled\" : true , \"command\" : [ \"fortls\" ], \"selector\" : \"source.modern-fortran | source.fixedform-fortran\" } } } Sublime Text 3 { \"clients\" : { \"fortls\" : { \"enabled\" : true , \"command\" : [ \"fortls\" ], \"languageId\" : \"fortran\" , \"scopes\" : [ \"source.modern-fortran\" , \"source.fixedform-fortran\" ], \"syntaxes\" : [ \"Packages/Fortran/grammars/FortranModern.sublime-syntax\" , \"Packages/Fortran/grammars/FortranFixedForm.sublime-syntax\" ] } } } See available configuration options . For example set \"command\": [\"fortls\", \"--lowercase_intrinsics\"] to use lowercase for autocomplete suggestions. Go # Install gopls . Open Preferences > Package Settings > LSP > Settings and add the \"gopls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"gopls\" : { \"enabled\" : true , \"command\" : [ \"gopls\" ], \"selector\" : \"source.go\" , \"initializationOptions\" : { \"experimentalWorkspaceModule\" : false } } } } Sublime Text 3 { \"clients\" : { \"gopls\" : { \"enabled\" : true , \"command\" : [ \"gopls\" ], \"languageId\" : \"go\" , \"scopes\" : [ \"source.go\" ], \"syntaxes\" : [ \"Packages/Go/Go.sublime-syntax\" , \"Packages/GoSublime/syntax/GoSublime-Go-Recommended.sublime-syntax\" ], \"initializationOptions\" : { \"experimentalWorkspaceModule\" : false } }, } } Visit gopls repo for more info. Enable multi-module workspace support by setting the experimentalWorkspaceModule to true . Most features will work across modules, but some, such as goimports , will not work as expected. Please note that this setting is still very experimental. GraphQL # Follow installation instructions on LSP-graphql . Haskell # Install haskell-language-server . Open Preferences > Package Settings > LSP > Settings and add the \"haskell-language-server\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"haskell-language-server\" : { \"enabled\" : true , \"command\" : [ \"haskell-language-server-wrapper\" , \"--lsp\" ], \"selector\" : \"source.haskell\" } } } Sublime Text 3 { \"clients\" : { \"haskell-language-server\" : { \"enabled\" : true , \"command\" : [ \"haskell-language-server-wrapper\" , \"--lsp\" ], \"languageId\" : \"haskell\" , \"scopes\" : [ \"source.haskell\" ], \"syntaxes\" : [ \"Packages/Haskell/Haskell.sublime-syntax\" ] } } } HTML # Follow installation instructions on LSP-html . Java # Download and extract Eclipse's jdt-ls . Open Preferences > Package Settings > LSP > Settings and add the \"jdtls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"jdtls\" : { \"enabled\" : true , \"command\" : [ \"java\" , \"--add-modules=ALL-SYSTEM\" , \"--add-opens\" , \"java.base/java.util=ALL-UNNAMED\" , \"--add-opens\" , \"java.base/java.lang=ALL-UNNAMED\" , \"-Declipse.application=org.eclipse.jdt.ls.core.id1\" , \"-Dosgi.bundles.defaultStartLevel=4\" , \"-Declipse.product=org.eclipse.jdt.ls.core.product\" , \"-Dfile.encoding=UTF-8\" , \"-DwatchParentProcess={true|false}\" , // false o n wi n dows , true o t her OSs \"-noverify\" , \"-Xmx1G\" , \"-XX:+UseG1GC\" , \"-XX:+UseStringDeduplication\" , \"-jar\" , \"PATH/TO/jdt-language-server-latest/plugins/org.eclipse.equinox.launcher_*.jar\" // 1. replace t he PATH/TO wi t h your ow n 2. replace * wi t h t he f ile versio n \"-configuration\" , \"PATH/TO/jdt-language-server-latest/config_{win|mac|linux}\" , // 1. replace t he PATH/TO wi t h your ow n 2. choose t he co nf ig f older based o n t he OS \"-data\" , \"<TEMP_DIR>/${project_base_name}/jdt_ws\" // replace <TEMP_DIR> wi t h t he te mp f older i n your sys te m. macOS : echo $TMPDIR ], \"selector\" : \"source.java\" } } } Sublime Text 3 { \"clients\" : { \"jdtls\" : { \"enabled\" : true , \"command\" : [ \"java\" , \"--add-modules=ALL-SYSTEM\" , \"--add-opens\" , \"java.base/java.util=ALL-UNNAMED\" , \"--add-opens\" , \"java.base/java.lang=ALL-UNNAMED\" , \"-Declipse.application=org.eclipse.jdt.ls.core.id1\" , \"-Dosgi.bundles.defaultStartLevel=4\" , \"-Declipse.product=org.eclipse.jdt.ls.core.product\" , \"-Dfile.encoding=UTF-8\" , \"-DwatchParentProcess={true|false}\" , // false o n wi n dows , true o t her OSs \"-noverify\" , \"-Xmx1G\" , \"-XX:+UseG1GC\" , \"-XX:+UseStringDeduplication\" , \"-jar\" , \"PATH/TO/jdt-language-server-latest/plugins/org.eclipse.equinox.launcher_*.jar\" // 1. replace t he PATH/TO wi t h your ow n 2. replace * wi t h t he f ile versio n \"-configuration\" , \"PATH/TO/jdt-language-server-latest/config_{win|mac|linux}\" , // 1. replace t he PATH/TO wi t h your ow n 2. choose t he co nf ig f older based o n t he OS \"-data\" , \"<TEMP_DIR>/${project_base_name}/jdt_ws\" // replace <TEMP_DIR> wi t h t he te mp f older i n your sys te m. macOS : echo $TMPDIR ], \"languageId\" : \"java\" , \"scopes\" : [ \"source.java\" ], \"syntaxes\" : [ \"Packages/Java/Java.sublime-syntax\" ] } } } JSON # Follow installation instructions on LSP-json . Julia # Install the Julia package from Package Control for syntax highlighting. Install the LanguageServer and SymbolServer packages from the Julia REPL: import Pkg; Pkg.add(\"LanguageServer\") Pkg.add(\"SymbolServer\") Open Preferences > Package Settings > LSP > Settings and add the \"julials\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"julials\" : { \"enabled\" : true , \"command\" : [ \"bash\" , \"PATH_TO_JULIA_SERVER/LanguageServer/contrib/languageserver.sh\" ], // o n Li nu x/macOS // \"command\" : [ \"julia\" , \"--startup-file=no\" , \"--history-file=no\" , \"-e\" , \"using Pkg; using LanguageServer; using LanguageServer.SymbolServer; env_path=dirname(Pkg.Types.Context().env.project_file); server=LanguageServer.LanguageServerInstance(stdin,stdout,false,env_path); run(server)\" ], // o n Wi n dows \"selector\" : \"source.julia\" , \"settings\" : { // De fault values fr om VS Code : \"julia.format.calls\" : true , // Forma t fun c t io n calls \"julia.format.comments\" : true , // Forma t comme nts \"julia.format.curly\" : true , // Forma t braces \"julia.format.docs\" : true , // Forma t i nl i ne docume ntat io n \"julia.format.indent\" : 4 , // I n de nt size f or f orma tt i n g \"julia.format.indents\" : true , // Forma t f ile i n de nts \"julia.format.iterOps\" : true , // Forma t loop i terat ors \"julia.format.kw\" : true , // Remove spaces arou n d = i n fun c t io n keywords \"julia.format.lineends\" : false , // [ u n docume nte d ] \"julia.format.ops\" : true , // Forma t whi tes pace arou n d opera t ors \"julia.format.tuples\" : true , // Forma t tu ples \"julia.lint.call\" : false , // Check calls agai nst exis t i n g me t hods (experime ntal ) \"julia.lint.constif\" : true , // Check f or co nstant co n di t io nals o f i f s tate me nts \"julia.lint.datadecl\" : false , // [ u n docume nte d ] \"julia.lint.iter\" : true , // Check i terat or sy nta x o f loops \"julia.lint.lazy\" : true , // Check f or de ter mi n is t ic lazy boolea n opera t ors \"julia.lint.modname\" : true , // Check f or i n valid submodule na mes \"julia.lint.nothingcomp\" : false , // [ u n docume nte d ] \"julia.lint.pirates\" : true , // Check f or t ype piracy \"julia.lint.run\" : true , // ru n t he li nter o n ac t ive f iles \"julia.lint.typeparam\" : true // Check f or u nuse d Da ta Type parame ters } } } } Sublime Text 3 { \"clients\" : { \"julials\" : { \"enabled\" : true , \"command\" : [ \"bash\" , \"PATH_TO_JULIA_SERVER/LanguageServer/contrib/languageserver.sh\" ], // o n Li nu x/macOS // \"command\" : [ \"julia\" , \"--startup-file=no\" , \"--history-file=no\" , \"-e\" , \"using Pkg; using LanguageServer; using LanguageServer.SymbolServer; env_path=dirname(Pkg.Types.Context().env.project_file); server=LanguageServer.LanguageServerInstance(stdin,stdout,false,env_path); run(server)\" ], // o n Wi n dows \"languageId\" : \"julia\" , \"scopes\" : [ \"source.julia\" ], \"syntaxes\" : [ \"Packages/Julia/Julia.sublime-syntax\" ], \"settings\" : { // De fault values fr om VS Code : \"julia.format.calls\" : true , // Forma t fun c t io n calls \"julia.format.comments\" : true , // Forma t comme nts \"julia.format.curly\" : true , // Forma t braces \"julia.format.docs\" : true , // Forma t i nl i ne docume ntat io n \"julia.format.indent\" : 4 , // I n de nt size f or f orma tt i n g \"julia.format.indents\" : true , // Forma t f ile i n de nts \"julia.format.iterOps\" : true , // Forma t loop i terat ors \"julia.format.kw\" : true , // Remove spaces arou n d = i n fun c t io n keywords \"julia.format.lineends\" : false , // [ u n docume nte d ] \"julia.format.ops\" : true , // Forma t whi tes pace arou n d opera t ors \"julia.format.tuples\" : true , // Forma t tu ples \"julia.lint.call\" : false , // Check calls agai nst exis t i n g me t hods (experime ntal ) \"julia.lint.constif\" : true , // Check f or co nstant co n di t io nals o f i f s tate me nts \"julia.lint.datadecl\" : false , // [ u n docume nte d ] \"julia.lint.iter\" : true , // Check i terat or sy nta x o f loops \"julia.lint.lazy\" : true , // Check f or de ter mi n is t ic lazy boolea n opera t ors \"julia.lint.modname\" : true , // Check f or i n valid submodule na mes \"julia.lint.nothingcomp\" : false , // [ u n docume nte d ] \"julia.lint.pirates\" : true , // Check f or t ype piracy \"julia.lint.run\" : true , // ru n t he li nter o n ac t ive f iles \"julia.lint.typeparam\" : true // Check f or u nuse d Da ta Type parame ters } } } } Kotlin # Install the Kotlin package from Package Control for syntax highlighting. Install the Kotlin Language Server (requires building first). Open Preferences > Package Settings > LSP > Settings and add the \"kotlinls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"kotlinls\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/KotlinLanguageServer/build/install/kotlin-language-server/bin/kotlin-language-server.bat\" ], // Upda te t he PATH \"selector\" : \"source.Kotlin\" , \"settings\" : { \"kotlin\" : { // pu t your server se tt i n gs here } } } } } Sublime Text 3 { \"clients\" : { \"kotlinls\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/KotlinLanguageServer/build/install/kotlin-language-server/bin/kotlin-language-server.bat\" ], // Upda te t he PATH \"languageId\" : \"kotlin\" , \"scopes\" : [ \"source.Kotlin\" ], \"syntaxes\" : [ \"Packages/kotlin/Kotlin.tmLanguage\" ], \"settings\" : { \"kotlin\" : { // pu t your server se tt i n gs here } } } } } LaTeX # Instructions for Sublime Text 4. Follow installation instructions on LSP-TexLab . Instructions for Sublime Text 3. Download the binary . Open Preferences > Package Settings > LSP > Settings and add the \"texlab\" client configuration to the \"clients\" : { \"clients\" : { \"texlab\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/texlab\" ], // Upda te t he PATH \"languages\" : [{ \"languageId\" : \"latex\" , \"document_selector\" : \"text.tex.latex\" }, { \"languageId\" : \"bibtex\" , \"document_selector\" : \"text.bibtex\" }] } } } For further requirements see the TexLab Docs . Lisp # Install cc-lsp using Roswell. Open Preferences > Package Settings > LSP > Settings and add the \"cc-lsp\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"cc-lsp\" : { \"enabled\" : true , \"command\" : [ \"cl-lsp\" , \"stdio\" ], \"selector\" : \"source.lisp\" } } } Sublime Text 3 { \"clients\" : { \"cc-lsp\" : { \"enabled\" : true , \"command\" : [ \"cl-lsp\" , \"stdio\" ], \"languageId\" : \"lisp\" , \"scopes\" : [ \"source.lisp\" ], \"syntaxes\" : [ \"Packages/Lisp/Lisp.sublime-syntax\" ] } } } Lua # Download the VS Code extension . Open Preferences > Package Settings > LSP > Settings and add the \"lua-ls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"lua-ls\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/sumneko.lua-#.#.#/extension/server/bin/lua-language-server\" , // Upda te t he PATH \"-E\" , \"PATH/TO/sumneko.lua-#.#.#/extension/server/main.lua\" ], \"selector\" : \"source.lua\" } } } Sublime Text 3 { \"clients\" : { \"lua-ls\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/sumneko.lua-#.#.#/extension/server/bin/lua-language-server\" , // Upda te t he PATH \"-E\" , \"PATH/TO/sumneko.lua-#.#.#/extension/server/main.lua\" ], \"languageId\" : \"lua\" , \"scopes\" : [ \"source.lua\" ], \"syntaxes\" : [ \"Packages/Lua/Lua.sublime-syntax\" ] } } } OCaml/Reason # Install the Reason package from Package Control for syntax highlighting. Install the Reason Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"reason\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"reason\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/reason-language-server.exe\" ], // Upda te t he PATH \"selector\" : \"source.ocaml | source.reason\" } } } Sublime Text 3 { \"clients\" : { \"reason\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/reason-language-server.exe\" ], // Upda te t he PATH \"languageId\" : \"reason\" , \"scopes\" : [ \"source.ocaml\" , \"source.reason\" ], \"syntaxes\" : [ \"Packages/Ocaml/OCaml.sublime-syntax\" , \"Packages/Reason/Reason.tmLanguage\" , \"Packages/sublime-reason/Reason.tmLanguage\" ] } } } PromQL # Follow installation instructions on LSP-promql . PHP # There are multiple options: Intelephense # Follow installation instructions on LSP-intelephense . Serenata # Follow installation instructions on LSP-serenata . PowerShell # Install the PowerShell package from Package Control for syntax highlighting. Download and extract the latest release PowerShellEditorServices. Make sure PowerShell help files are up to date by running Update-Help in the PowerShell console (the one you're using in the command below). Open Preferences > Package Settings > LSP > Settings and add the \"powershell-ls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"powershell-ls\" : { \"enabled\" : true , \"command\" : [ \"powershell\" , // or pwsh f or PowerShell Core \"-NoLogo\" , \"-NoProfile\" , \"-NonInteractive\" , \"-ExecutionPolicy\" , \"Bypass\" , // Wi n dows o nl y \"-Command\" , \"PATH/TO/PowerShellEditorServices/PowerShellEditorServices/Start-EditorServices.ps1\" , \"-LogPath\" , \"PATH/TO/pses.log\" , // speci f y a pa t h where a log f ile should be s t ored \"-LogLevel\" , \"Normal\" , \"-SessionDetailsPath\" , \"PATH/TO/session.json\" , // speci f y a pa t h where a f ile f or sessio n de ta ils should be s t ored \"-FeatureFlags\" , \"@()\" , \"-HostName\" , \"'Sublime Text'\" , \"-HostProfileId\" , \"subl\" , \"-HostVersion\" , \"1.0.0\" , \"-AdditionalModules\" , \"@()\" , \"-BundledModulesPath\" , \"PATH/TO/PowerShellEditorServices\" , \"-Stdio\" ], \"selector\" : \"source.powershell\" } } } Sublime Text 3 { \"clients\" : { \"powershell-ls\" : { \"enabled\" : true , \"command\" : [ \"powershell\" , // or pwsh f or PowerShell Core \"-NoLogo\" , \"-NoProfile\" , \"-NonInteractive\" , \"-ExecutionPolicy\" , \"Bypass\" , // Wi n dows o nl y \"-Command\" , \"PATH/TO/PowerShellEditorServices/PowerShellEditorServices/Start-EditorServices.ps1\" , \"-LogPath\" , \"PATH/TO/pses.log\" , // speci f y a pa t h where a log f ile should be s t ored \"-LogLevel\" , \"Normal\" , \"-SessionDetailsPath\" , \"PATH/TO/session.json\" , // speci f y a pa t h where a f ile f or sessio n de ta ils should be s t ored \"-FeatureFlags\" , \"@()\" , \"-HostName\" , \"'Sublime Text'\" , \"-HostProfileId\" , \"subl\" , \"-HostVersion\" , \"1.0.0\" , \"-AdditionalModules\" , \"@()\" , \"-BundledModulesPath\" , \"PATH/TO/PowerShellEditorServices\" , \"-Stdio\" ], \"languageId\" : \"powershell\" , \"scopes\" : [ \"source.powershell\" ], \"syntaxes\" : [ \"Packages/PowerShell/Support/PowershellSyntax.tmLanguage\" ] } } } For more details see this issue . Python # There are multiple options: Pyright # Follow installation instructions on LSP-pyright . Python LSP Server # pip install 'python-lsp-server[all]' Make sure you can run pylsp in your terminal. If you've installed it into a virtualenv, you might need to override the path to pylsp in global LSP settings (Package Settings -> LSP -> Settings): Sublime Text 4 { \"clients\" : { \"pylsp\" : { \"enabled\" : true , \"command\" : [ \"pylsp\" ], // \"command\" : [ \"/Users/mike/.virtualenvs/pylsp-virtual-env/bin/pylsp\" ], // example pa t h , adjus t i t f or your use case \"selector\" : \"source.python\" } } } Sublime Text 3 { \"clients\" : { \"pylsp\" : { \"enabled\" : true , \"command\" : [ \"pylsp\" ], // \"command\" : [ \"/Users/mike/.virtualenvs/pylsp-virtual-env/bin/pylsp\" ], // example pa t h , adjus t i t f or your use case \"languageId\" : \"python\" , \"scopes\" : [ \"source.python\" ], \"syntaxes\" : [ \"Packages/Python/Python.sublime-syntax\" , \"Packages/MagicPython/grammars/MagicPython.tmLanguage\" , \"Packages/Djaneiro/Syntaxes/Python Django.tmLanguage\" ] } } } If you use a virtualenv for your current project, add a path to it in your project configuration (Project -> Edit Project): { \"settings\" : { \"LSP\" : { \"pylsp\" : { \"enabled\" : true , // i f you wa nt t o e na ble Py t ho n La n guage Server f or curre nt projec t o nl y \"env\" : { // example pa t h , adjus t i t f or your use case // i t nee ds t o be a n absolu te pa t h , ne i t her $HOME n or ~ work here \"PYTHONPATH\" : \"/Users/mike/.virtualenvs/my-virtual-env/lib/python3.7/site-packages\" } } } } } A basic configuration below can be used for bootstrapping your own: \"pylsp\" : { \"enabled\" : true , \"command\" : [ \"pylsp\" ], \"settings\" : { \"pylsp.env\" : { // Maki n g Sublime's ow n libs available t o t he li nters . // \"PYTHONPATH\" : \"/Applications/Sublime Text.app/Contents/MacOS/Lib/python33\" , }, // Co nf igura t io n is compu te d f irs t fr om user co nf igura t io n (i n home direc t ory) , // overridde n by co nf igura t io n passed i n by t he la n guage clie nt , // a n d t he n overridde n by co nf igura t io n discovered i n t he workspace. \"pylsp.configurationSources\" : [ \"pycodestyle\" , // discovered i n ~/.co nf ig/pycodes t yle , se tu p.c f g , t ox.i n i a n d pycodes t yle.c f g // \"flake8\" , // discovered i n ~/.co nf ig/ fla ke 8 , se tu p.c f g , t ox.i n i a n d fla ke 8. c f g ], \"pylsp.plugins.jedi.extra_paths\" : [ // The direc t ory where t he pip i nstallat io n package is loca te d ], // E na ble fu zzy ma t ches whe n reques t i n g au t ocomple te \"pylsp.plugins.jedi.jedi_completion.fuzzy\" : true , \"pylsp.plugins.jedi.pycodestyle.enabled\" : true , \"pylsp.plugins.jedi.pycodestyle.exclude\" : [ // Exclude f iles or direc t ories which ma t ch t hese pa tterns ], \"pylsp.plugins.jedi.pycodestyle.ignore\" : [ // Exclude f iles or direc t ories which ma t ch t hese pa tterns ], // \"pylsp.plugins.jedi.pycodestyle.maxLineLength: 80\" // se t maximum allowed li ne le n g t h \"pylsp.plugins.pydocstyle.enabled\" : false , \"pylsp.plugins.pyflakes.enabled\" : true , \"pylsp.plugins.pylint.enabled\" : false , \"pylsp.plugins.yapf.enabled\" : true , // pylsp' 3 rd Par t y Plugi ns , Mypy t ype checki n g f or Py t ho n 3 , Mus t be i nstalle d via pip be f ore e na bli n g \"pylsp.plugins.pyls_mypy.enabled\" : false , // I nstall wi t h : pip i nstall pyls - mypy \"pylsp.plugins.pyls_mypy.live_mode\" : true } } Documentation: github:python-lsp/python-lsp-server . List of all built-in settings . R # Follow installation instructions on R-IDE . Ruby / Ruby on Rails # There are multiple options: Solargraph # Install solargraph . Open Preferences > Package Settings > LSP > Settings and add the \"ruby\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"ruby\" : { \"enabled\" : true , \"command\" : [ \"solargraph\" , \"stdio\" ], \"selector\" : \"source.ruby | text.html.ruby\" , \"initializationOptions\" : { \"diagnostics\" : false } } } } Sublime Text 3 { \"clients\" : { \"ruby\" : { \"enabled\" : true , \"command\" : [ \"solargraph\" , \"stdio\" ], \"languageId\" : \"ruby\" , \"scopes\" : [ \"source.ruby\" , \"source.ruby.rails\" , \"text.html.ruby\" ], \"syntaxes\" : [ \"Packages/Ruby/Ruby.sublime-syntax\" , \"Packages/Rails/Ruby on Rails.sublime-syntax\" , \"Packages/Rails/HTML (Rails).sublime-syntax\" ], \"initializationOptions\" : { \"diagnostics\" : false } } } } Sorbet # Install the sorbet and sorbet-runtime gem (see github:sorbet/sorbet ): gem install sorbet gem install sorbet-runtime If you have a Gemfile, using bundler, add sorbet and sorbet-runtime to your Gemfile and run: bundle install Open Preferences > Package Settings > LSP > Settings and add the \"sorbet\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"sorbet\" : { \"enabled\" : true , \"command\" : [ \"srb\" , \"tc\" , \"--typed\" , \"true\" , \"--enable-all-experimental-lsp-features\" , \"--lsp\" , \"--disable-watchman\" ], \"selector\" : \"source.ruby | text.html.ruby\" , } } } Sublime Text 3 { \"clients\" : { \"sorbet\" : { \"enabled\" : true , \"command\" : [ \"srb\" , \"tc\" , \"--typed\" , \"true\" , \"--enable-all-experimental-lsp-features\" , \"--lsp\" , \"--disable-watchman\" ], \"languageId\" : \"ruby\" , \"scopes\" : [ \"source.ruby\" , \"source.ruby.rails\" , \"text.html.ruby\" ], \"syntaxes\" : [ \"Packages/Ruby/Ruby.sublime-syntax\" , \"Packages/Rails/Ruby on Rails.sublime-syntax\" , \"Packages/Rails/HTML (Rails).sublime-syntax\" ], } } } Rust # There are multiple options: Rust Analyzer # Download a binary from the release page of rust-analyzer . Rename the binary to rust-analyzer . Make sure the binary is in your $PATH . Open Preferences > Package Settings > LSP > Settings and add the \"rust-analyzer\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"rust-analyzer\" : { \"enabled\" : true , \"command\" : [ \"rust-analyzer\" ], \"selector\" : \"source.rust\" } } } Sublime Text 3 { \"clients\" : { \"rust-analyzer\" : { \"enabled\" : true , \"command\" : [ \"rust-analyzer\" ], \"languageId\" : \"rust\" , \"scopes\" : [ \"source.rust\" ], \"syntaxes\" : [ \"Packages/Rust/Rust.sublime-syntax\" , \"Packages/Rust Enhanced/RustEnhanced.sublime-syntax\" ] } } } Rust Enhanced # Follow installation instructions on Rust Enhanced . Scala # Follow installation instructions on LSP-metals . Stylelint # Follow installation instructions on LSP-stylelint . Svelte # Follow installation instructions on LSP-svelte . Swift # Install the Swift package from Package Control for syntax highlighting. Install Xcode 11.4 or later and ensure that xcrun -find sourcekit-lsp returns the path to sourcekit-lsp. Open Preferences > Package Settings > LSP > Settings and add the \"sourcekit-lsp\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"sourcekit-lsp\" : { \"enabled\" : true , \"command\" : [ \"xcrun\" , \"sourcekit-lsp\" ], \"selector\" : \"source.swift\" } } } Sublime Text 3 { \"clients\" : { \"sourcekit-lsp\" : { \"enabled\" : true , \"command\" : [ \"xcrun\" , \"sourcekit-lsp\" ], \"languageId\" : \"swift\" , \"scopes\" : [ \"source.swift\" ], \"syntaxes\" : [ \"Packages/Swift/Syntaxes/Swift.tmLanguage\" ] } } } TAGML # Follow installation instructions on LSP-tagml . Terraform # Install the Terraform package from Package Control for syntax highlighting. Download terraform-lsp binary and make it available in your PATH. Open Preferences > Package Settings > LSP > Settings and add the \"terraform\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"terraform\" : { \"enabled\" : true , \"command\" : [ \"terraform-lsp\" ], \"selector\" : \"source.terraform\" } } } Sublime Text 3 { \"clients\" : { \"terraform\" : { \"enabled\" : true , \"command\" : [ \"terraform-lsp\" ], \"languageId\" : \"terraform\" , \"scopes\" : [ \"source.terraform\" ], \"syntaxes\" : [ \"Packages/Terraform/Terraform.sublime-syntax\" ] } } } TypeScript / JavaScript # Follow installation instructions on LSP-typescript . Vue # Follow installation instructions on LSP-vue . XML # Follow installation instructions on LSP-lemminx . YAML # Follow installation instructions on LSP-yaml .","title":"Language Servers"},{"location":"language_servers/#language-servers","text":"Follow the setup steps for a language server to get it up and running. If you encounter problems, consult the common issues page or search the LSP issues before opening new ones. If there are no setup steps for a language server on this page, but a language server implementation exist, follow the guide for creating a client configuration . Pull requests for adding a new client configuration are welcome. We recommend installing LSP-json . LSP-json provides completions and diagnostics when editing JSON files that adhere to a JSON schema.","title":"Language Servers"},{"location":"language_servers/#angular","text":"Follow installation instructions on LSP-angular .","title":"Angular"},{"location":"language_servers/#bash","text":"Follow installation instructions on LSP-bash .","title":"Bash"},{"location":"language_servers/#cc","text":"See the dedicated C/C++ guide for using ccls or clangd.","title":"C/C++"},{"location":"language_servers/#c","text":"Download a .NET SDK. The \".NET Core\" SDK is known to not work on macOS. If on macOS/Linux, download the Mono Runtime in order to be able to run .NET executables and DLLs. Download omnisharp . Open Preferences > Package Settings > LSP > Settings and add the \"omnisharp\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"omnisharp\" : { \"enabled\" : true , \"command\" : [ \"mono\" , // mo n o is o nl y ne cessary f or macOS/Li nu x \"/home/tb/prebuilt/omnisharp/OmniSharp.exe\" , \"-lsp\" ], \"env\" : { // This may or may n o t be ne cessary , please repor t your f i n di n gs! \"FrameworkPathOverride\" : \"/path/to/omnisharp/.msbuild/Current\" }, \"selector\" : \"source.cs\" } } } Sublime Text 3 { \"clients\" : { \"omnisharp\" : { \"enabled\" : true , \"command\" : [ \"mono\" , // mo n o is o nl y ne cessary f or macOS/Li nu x \"/home/tb/prebuilt/omnisharp/OmniSharp.exe\" , \"-lsp\" ], \"env\" : { // This may or may n o t be ne cessary , please repor t your f i n di n gs! \"FrameworkPathOverride\" : \"/path/to/omnisharp/.msbuild/Current\" }, \"languageId\" : \"csharp\" , \"scopes\" : [ \"source.cs\" ], \"syntaxes\" : [ \"Packages/C#/C#.sublime-syntax\" ] } } }","title":"C#"},{"location":"language_servers/#clojure","text":"Download clojure-lsp . Open Preferences > Package Settings > LSP > Settings and add the \"clojure-lsp\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"clojure-lsp\" : { \"enabled\" : true , \"command\" : [ \"java\" , \"-jar\" , \"/PATH/TO/clojure-lsp\" ], // Upda te t he PATH \"selector\" : \"source.clojure\" , \"initializationOptions\" : {} } } } Sublime Text 3 { \"clients\" : { \"clojure-lsp\" : { \"enabled\" : true , \"command\" : [ \"java\" , \"-jar\" , \"/PATH/TO/clojure-lsp\" ], // Upda te t he PATH \"languageId\" : \"clojure\" , \"scopes\" : [ \"source.clojure\" ], \"syntaxes\" : [ \"Packages/Clojure/Clojure.sublime-syntax\" ], \"initializationOptions\" : {} } } } See available initializationOptions .","title":"Clojure"},{"location":"language_servers/#css","text":"Follow installation instructions on LSP-css .","title":"CSS"},{"location":"language_servers/#d","text":"Install the D Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"dls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"dls\" : { \"enabled\" : true , \"command\" : [ \"/PATH/TO/DLS_EXECUTABLE\" ], // Upda te t he PATH \"selector\" : \"source.d\" } } } Sublime Text 3 { \"clients\" : { \"dls\" : { \"enabled\" : true , \"command\" : [ \"/PATH/TO/DLS_EXECUTABLE\" ], // Upda te t he PATH \"languageId\" : \"d\" , \"scopes\" : [ \"source.d\" ], \"syntaxes\" : [ \"Packages/D/D.sublime-syntax\" ] } } }","title":"D"},{"location":"language_servers/#dart","text":"Follow installation instructions on LSP-Dart .","title":"Dart"},{"location":"language_servers/#dockerfile","text":"Follow installation instructions on LSP-dockerfile .","title":"Dockerfile"},{"location":"language_servers/#elixir","text":"Follow installation instructions on LSP-elixir .","title":"Elixir"},{"location":"language_servers/#elm","text":"Follow installation instructions on LSP-elm .","title":"Elm"},{"location":"language_servers/#erlang","text":"Install the Erlang Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"erlang-ls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"erlang-ls\" : { \"enabled\" : true , \"command\" : [ \"/PATH/TO/erlang_ls\" , \"--transport\" , \"stdio\" ], // Upda te t he PATH \"selector\" : \"source.erlang\" } } } Sublime Text 3 { \"clients\" : { \"erlang-ls\" : { \"enabled\" : true , \"command\" : [ \"/path/to/my/erlang_ls\" , \"--transport\" , \"stdio\" ], \"languageId\" : \"erlang\" , \"scopes\" : [ \"source.erlang\" ], \"syntaxes\" : [ \"Packages/Erlang/Erlang.sublime-syntax\" ] } } }","title":"Erlang"},{"location":"language_servers/#eslint","text":"Follow installation instructions on LSP-eslint .","title":"ESLint"},{"location":"language_servers/#flow","text":"Install flow . Open Preferences > Package Settings > LSP > Settings and add the \"flow\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"flow\" : { \"enabled\" : true , \"command\" : [ \"flow\" , \"lsp\" ], \"selector\" : \"source.js | source.js.react\" } } } Sublime Text 3 { \"clients\" : { \"flow\" : { \"enabled\" : true , \"command\" : [ \"flow\" , \"lsp\" ], \"languageId\" : \"javascript\" , \"scopes\" : [ \"source.js\" ], \"syntaxes\" : [ \"Packages/Babel/JavaScript (Babel).sublime-syntax\" , \"Packages/JavaScript/JavaScript.sublime-syntax\" ] } } }","title":"Flow"},{"location":"language_servers/#fortran","text":"Install the Fortran package from Package Control for syntax highlighting. Install the Fortran Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"fortls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"fortls\" : { \"enabled\" : true , \"command\" : [ \"fortls\" ], \"selector\" : \"source.modern-fortran | source.fixedform-fortran\" } } } Sublime Text 3 { \"clients\" : { \"fortls\" : { \"enabled\" : true , \"command\" : [ \"fortls\" ], \"languageId\" : \"fortran\" , \"scopes\" : [ \"source.modern-fortran\" , \"source.fixedform-fortran\" ], \"syntaxes\" : [ \"Packages/Fortran/grammars/FortranModern.sublime-syntax\" , \"Packages/Fortran/grammars/FortranFixedForm.sublime-syntax\" ] } } } See available configuration options . For example set \"command\": [\"fortls\", \"--lowercase_intrinsics\"] to use lowercase for autocomplete suggestions.","title":"Fortran"},{"location":"language_servers/#go","text":"Install gopls . Open Preferences > Package Settings > LSP > Settings and add the \"gopls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"gopls\" : { \"enabled\" : true , \"command\" : [ \"gopls\" ], \"selector\" : \"source.go\" , \"initializationOptions\" : { \"experimentalWorkspaceModule\" : false } } } } Sublime Text 3 { \"clients\" : { \"gopls\" : { \"enabled\" : true , \"command\" : [ \"gopls\" ], \"languageId\" : \"go\" , \"scopes\" : [ \"source.go\" ], \"syntaxes\" : [ \"Packages/Go/Go.sublime-syntax\" , \"Packages/GoSublime/syntax/GoSublime-Go-Recommended.sublime-syntax\" ], \"initializationOptions\" : { \"experimentalWorkspaceModule\" : false } }, } } Visit gopls repo for more info. Enable multi-module workspace support by setting the experimentalWorkspaceModule to true . Most features will work across modules, but some, such as goimports , will not work as expected. Please note that this setting is still very experimental.","title":"Go"},{"location":"language_servers/#graphql","text":"Follow installation instructions on LSP-graphql .","title":"GraphQL"},{"location":"language_servers/#haskell","text":"Install haskell-language-server . Open Preferences > Package Settings > LSP > Settings and add the \"haskell-language-server\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"haskell-language-server\" : { \"enabled\" : true , \"command\" : [ \"haskell-language-server-wrapper\" , \"--lsp\" ], \"selector\" : \"source.haskell\" } } } Sublime Text 3 { \"clients\" : { \"haskell-language-server\" : { \"enabled\" : true , \"command\" : [ \"haskell-language-server-wrapper\" , \"--lsp\" ], \"languageId\" : \"haskell\" , \"scopes\" : [ \"source.haskell\" ], \"syntaxes\" : [ \"Packages/Haskell/Haskell.sublime-syntax\" ] } } }","title":"Haskell"},{"location":"language_servers/#html","text":"Follow installation instructions on LSP-html .","title":"HTML"},{"location":"language_servers/#java","text":"Download and extract Eclipse's jdt-ls . Open Preferences > Package Settings > LSP > Settings and add the \"jdtls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"jdtls\" : { \"enabled\" : true , \"command\" : [ \"java\" , \"--add-modules=ALL-SYSTEM\" , \"--add-opens\" , \"java.base/java.util=ALL-UNNAMED\" , \"--add-opens\" , \"java.base/java.lang=ALL-UNNAMED\" , \"-Declipse.application=org.eclipse.jdt.ls.core.id1\" , \"-Dosgi.bundles.defaultStartLevel=4\" , \"-Declipse.product=org.eclipse.jdt.ls.core.product\" , \"-Dfile.encoding=UTF-8\" , \"-DwatchParentProcess={true|false}\" , // false o n wi n dows , true o t her OSs \"-noverify\" , \"-Xmx1G\" , \"-XX:+UseG1GC\" , \"-XX:+UseStringDeduplication\" , \"-jar\" , \"PATH/TO/jdt-language-server-latest/plugins/org.eclipse.equinox.launcher_*.jar\" // 1. replace t he PATH/TO wi t h your ow n 2. replace * wi t h t he f ile versio n \"-configuration\" , \"PATH/TO/jdt-language-server-latest/config_{win|mac|linux}\" , // 1. replace t he PATH/TO wi t h your ow n 2. choose t he co nf ig f older based o n t he OS \"-data\" , \"<TEMP_DIR>/${project_base_name}/jdt_ws\" // replace <TEMP_DIR> wi t h t he te mp f older i n your sys te m. macOS : echo $TMPDIR ], \"selector\" : \"source.java\" } } } Sublime Text 3 { \"clients\" : { \"jdtls\" : { \"enabled\" : true , \"command\" : [ \"java\" , \"--add-modules=ALL-SYSTEM\" , \"--add-opens\" , \"java.base/java.util=ALL-UNNAMED\" , \"--add-opens\" , \"java.base/java.lang=ALL-UNNAMED\" , \"-Declipse.application=org.eclipse.jdt.ls.core.id1\" , \"-Dosgi.bundles.defaultStartLevel=4\" , \"-Declipse.product=org.eclipse.jdt.ls.core.product\" , \"-Dfile.encoding=UTF-8\" , \"-DwatchParentProcess={true|false}\" , // false o n wi n dows , true o t her OSs \"-noverify\" , \"-Xmx1G\" , \"-XX:+UseG1GC\" , \"-XX:+UseStringDeduplication\" , \"-jar\" , \"PATH/TO/jdt-language-server-latest/plugins/org.eclipse.equinox.launcher_*.jar\" // 1. replace t he PATH/TO wi t h your ow n 2. replace * wi t h t he f ile versio n \"-configuration\" , \"PATH/TO/jdt-language-server-latest/config_{win|mac|linux}\" , // 1. replace t he PATH/TO wi t h your ow n 2. choose t he co nf ig f older based o n t he OS \"-data\" , \"<TEMP_DIR>/${project_base_name}/jdt_ws\" // replace <TEMP_DIR> wi t h t he te mp f older i n your sys te m. macOS : echo $TMPDIR ], \"languageId\" : \"java\" , \"scopes\" : [ \"source.java\" ], \"syntaxes\" : [ \"Packages/Java/Java.sublime-syntax\" ] } } }","title":"Java"},{"location":"language_servers/#json","text":"Follow installation instructions on LSP-json .","title":"JSON"},{"location":"language_servers/#julia","text":"Install the Julia package from Package Control for syntax highlighting. Install the LanguageServer and SymbolServer packages from the Julia REPL: import Pkg; Pkg.add(\"LanguageServer\") Pkg.add(\"SymbolServer\") Open Preferences > Package Settings > LSP > Settings and add the \"julials\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"julials\" : { \"enabled\" : true , \"command\" : [ \"bash\" , \"PATH_TO_JULIA_SERVER/LanguageServer/contrib/languageserver.sh\" ], // o n Li nu x/macOS // \"command\" : [ \"julia\" , \"--startup-file=no\" , \"--history-file=no\" , \"-e\" , \"using Pkg; using LanguageServer; using LanguageServer.SymbolServer; env_path=dirname(Pkg.Types.Context().env.project_file); server=LanguageServer.LanguageServerInstance(stdin,stdout,false,env_path); run(server)\" ], // o n Wi n dows \"selector\" : \"source.julia\" , \"settings\" : { // De fault values fr om VS Code : \"julia.format.calls\" : true , // Forma t fun c t io n calls \"julia.format.comments\" : true , // Forma t comme nts \"julia.format.curly\" : true , // Forma t braces \"julia.format.docs\" : true , // Forma t i nl i ne docume ntat io n \"julia.format.indent\" : 4 , // I n de nt size f or f orma tt i n g \"julia.format.indents\" : true , // Forma t f ile i n de nts \"julia.format.iterOps\" : true , // Forma t loop i terat ors \"julia.format.kw\" : true , // Remove spaces arou n d = i n fun c t io n keywords \"julia.format.lineends\" : false , // [ u n docume nte d ] \"julia.format.ops\" : true , // Forma t whi tes pace arou n d opera t ors \"julia.format.tuples\" : true , // Forma t tu ples \"julia.lint.call\" : false , // Check calls agai nst exis t i n g me t hods (experime ntal ) \"julia.lint.constif\" : true , // Check f or co nstant co n di t io nals o f i f s tate me nts \"julia.lint.datadecl\" : false , // [ u n docume nte d ] \"julia.lint.iter\" : true , // Check i terat or sy nta x o f loops \"julia.lint.lazy\" : true , // Check f or de ter mi n is t ic lazy boolea n opera t ors \"julia.lint.modname\" : true , // Check f or i n valid submodule na mes \"julia.lint.nothingcomp\" : false , // [ u n docume nte d ] \"julia.lint.pirates\" : true , // Check f or t ype piracy \"julia.lint.run\" : true , // ru n t he li nter o n ac t ive f iles \"julia.lint.typeparam\" : true // Check f or u nuse d Da ta Type parame ters } } } } Sublime Text 3 { \"clients\" : { \"julials\" : { \"enabled\" : true , \"command\" : [ \"bash\" , \"PATH_TO_JULIA_SERVER/LanguageServer/contrib/languageserver.sh\" ], // o n Li nu x/macOS // \"command\" : [ \"julia\" , \"--startup-file=no\" , \"--history-file=no\" , \"-e\" , \"using Pkg; using LanguageServer; using LanguageServer.SymbolServer; env_path=dirname(Pkg.Types.Context().env.project_file); server=LanguageServer.LanguageServerInstance(stdin,stdout,false,env_path); run(server)\" ], // o n Wi n dows \"languageId\" : \"julia\" , \"scopes\" : [ \"source.julia\" ], \"syntaxes\" : [ \"Packages/Julia/Julia.sublime-syntax\" ], \"settings\" : { // De fault values fr om VS Code : \"julia.format.calls\" : true , // Forma t fun c t io n calls \"julia.format.comments\" : true , // Forma t comme nts \"julia.format.curly\" : true , // Forma t braces \"julia.format.docs\" : true , // Forma t i nl i ne docume ntat io n \"julia.format.indent\" : 4 , // I n de nt size f or f orma tt i n g \"julia.format.indents\" : true , // Forma t f ile i n de nts \"julia.format.iterOps\" : true , // Forma t loop i terat ors \"julia.format.kw\" : true , // Remove spaces arou n d = i n fun c t io n keywords \"julia.format.lineends\" : false , // [ u n docume nte d ] \"julia.format.ops\" : true , // Forma t whi tes pace arou n d opera t ors \"julia.format.tuples\" : true , // Forma t tu ples \"julia.lint.call\" : false , // Check calls agai nst exis t i n g me t hods (experime ntal ) \"julia.lint.constif\" : true , // Check f or co nstant co n di t io nals o f i f s tate me nts \"julia.lint.datadecl\" : false , // [ u n docume nte d ] \"julia.lint.iter\" : true , // Check i terat or sy nta x o f loops \"julia.lint.lazy\" : true , // Check f or de ter mi n is t ic lazy boolea n opera t ors \"julia.lint.modname\" : true , // Check f or i n valid submodule na mes \"julia.lint.nothingcomp\" : false , // [ u n docume nte d ] \"julia.lint.pirates\" : true , // Check f or t ype piracy \"julia.lint.run\" : true , // ru n t he li nter o n ac t ive f iles \"julia.lint.typeparam\" : true // Check f or u nuse d Da ta Type parame ters } } } }","title":"Julia"},{"location":"language_servers/#kotlin","text":"Install the Kotlin package from Package Control for syntax highlighting. Install the Kotlin Language Server (requires building first). Open Preferences > Package Settings > LSP > Settings and add the \"kotlinls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"kotlinls\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/KotlinLanguageServer/build/install/kotlin-language-server/bin/kotlin-language-server.bat\" ], // Upda te t he PATH \"selector\" : \"source.Kotlin\" , \"settings\" : { \"kotlin\" : { // pu t your server se tt i n gs here } } } } } Sublime Text 3 { \"clients\" : { \"kotlinls\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/KotlinLanguageServer/build/install/kotlin-language-server/bin/kotlin-language-server.bat\" ], // Upda te t he PATH \"languageId\" : \"kotlin\" , \"scopes\" : [ \"source.Kotlin\" ], \"syntaxes\" : [ \"Packages/kotlin/Kotlin.tmLanguage\" ], \"settings\" : { \"kotlin\" : { // pu t your server se tt i n gs here } } } } }","title":"Kotlin"},{"location":"language_servers/#latex","text":"Instructions for Sublime Text 4. Follow installation instructions on LSP-TexLab . Instructions for Sublime Text 3. Download the binary . Open Preferences > Package Settings > LSP > Settings and add the \"texlab\" client configuration to the \"clients\" : { \"clients\" : { \"texlab\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/texlab\" ], // Upda te t he PATH \"languages\" : [{ \"languageId\" : \"latex\" , \"document_selector\" : \"text.tex.latex\" }, { \"languageId\" : \"bibtex\" , \"document_selector\" : \"text.bibtex\" }] } } } For further requirements see the TexLab Docs .","title":"LaTeX"},{"location":"language_servers/#lisp","text":"Install cc-lsp using Roswell. Open Preferences > Package Settings > LSP > Settings and add the \"cc-lsp\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"cc-lsp\" : { \"enabled\" : true , \"command\" : [ \"cl-lsp\" , \"stdio\" ], \"selector\" : \"source.lisp\" } } } Sublime Text 3 { \"clients\" : { \"cc-lsp\" : { \"enabled\" : true , \"command\" : [ \"cl-lsp\" , \"stdio\" ], \"languageId\" : \"lisp\" , \"scopes\" : [ \"source.lisp\" ], \"syntaxes\" : [ \"Packages/Lisp/Lisp.sublime-syntax\" ] } } }","title":"Lisp"},{"location":"language_servers/#lua","text":"Download the VS Code extension . Open Preferences > Package Settings > LSP > Settings and add the \"lua-ls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"lua-ls\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/sumneko.lua-#.#.#/extension/server/bin/lua-language-server\" , // Upda te t he PATH \"-E\" , \"PATH/TO/sumneko.lua-#.#.#/extension/server/main.lua\" ], \"selector\" : \"source.lua\" } } } Sublime Text 3 { \"clients\" : { \"lua-ls\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/sumneko.lua-#.#.#/extension/server/bin/lua-language-server\" , // Upda te t he PATH \"-E\" , \"PATH/TO/sumneko.lua-#.#.#/extension/server/main.lua\" ], \"languageId\" : \"lua\" , \"scopes\" : [ \"source.lua\" ], \"syntaxes\" : [ \"Packages/Lua/Lua.sublime-syntax\" ] } } }","title":"Lua"},{"location":"language_servers/#ocamlreason","text":"Install the Reason package from Package Control for syntax highlighting. Install the Reason Language Server . Open Preferences > Package Settings > LSP > Settings and add the \"reason\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"reason\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/reason-language-server.exe\" ], // Upda te t he PATH \"selector\" : \"source.ocaml | source.reason\" } } } Sublime Text 3 { \"clients\" : { \"reason\" : { \"enabled\" : true , \"command\" : [ \"PATH/TO/reason-language-server.exe\" ], // Upda te t he PATH \"languageId\" : \"reason\" , \"scopes\" : [ \"source.ocaml\" , \"source.reason\" ], \"syntaxes\" : [ \"Packages/Ocaml/OCaml.sublime-syntax\" , \"Packages/Reason/Reason.tmLanguage\" , \"Packages/sublime-reason/Reason.tmLanguage\" ] } } }","title":"OCaml/Reason"},{"location":"language_servers/#promql","text":"Follow installation instructions on LSP-promql .","title":"PromQL"},{"location":"language_servers/#php","text":"There are multiple options:","title":"PHP"},{"location":"language_servers/#intelephense","text":"Follow installation instructions on LSP-intelephense .","title":"Intelephense"},{"location":"language_servers/#serenata","text":"Follow installation instructions on LSP-serenata .","title":"Serenata"},{"location":"language_servers/#powershell","text":"Install the PowerShell package from Package Control for syntax highlighting. Download and extract the latest release PowerShellEditorServices. Make sure PowerShell help files are up to date by running Update-Help in the PowerShell console (the one you're using in the command below). Open Preferences > Package Settings > LSP > Settings and add the \"powershell-ls\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"powershell-ls\" : { \"enabled\" : true , \"command\" : [ \"powershell\" , // or pwsh f or PowerShell Core \"-NoLogo\" , \"-NoProfile\" , \"-NonInteractive\" , \"-ExecutionPolicy\" , \"Bypass\" , // Wi n dows o nl y \"-Command\" , \"PATH/TO/PowerShellEditorServices/PowerShellEditorServices/Start-EditorServices.ps1\" , \"-LogPath\" , \"PATH/TO/pses.log\" , // speci f y a pa t h where a log f ile should be s t ored \"-LogLevel\" , \"Normal\" , \"-SessionDetailsPath\" , \"PATH/TO/session.json\" , // speci f y a pa t h where a f ile f or sessio n de ta ils should be s t ored \"-FeatureFlags\" , \"@()\" , \"-HostName\" , \"'Sublime Text'\" , \"-HostProfileId\" , \"subl\" , \"-HostVersion\" , \"1.0.0\" , \"-AdditionalModules\" , \"@()\" , \"-BundledModulesPath\" , \"PATH/TO/PowerShellEditorServices\" , \"-Stdio\" ], \"selector\" : \"source.powershell\" } } } Sublime Text 3 { \"clients\" : { \"powershell-ls\" : { \"enabled\" : true , \"command\" : [ \"powershell\" , // or pwsh f or PowerShell Core \"-NoLogo\" , \"-NoProfile\" , \"-NonInteractive\" , \"-ExecutionPolicy\" , \"Bypass\" , // Wi n dows o nl y \"-Command\" , \"PATH/TO/PowerShellEditorServices/PowerShellEditorServices/Start-EditorServices.ps1\" , \"-LogPath\" , \"PATH/TO/pses.log\" , // speci f y a pa t h where a log f ile should be s t ored \"-LogLevel\" , \"Normal\" , \"-SessionDetailsPath\" , \"PATH/TO/session.json\" , // speci f y a pa t h where a f ile f or sessio n de ta ils should be s t ored \"-FeatureFlags\" , \"@()\" , \"-HostName\" , \"'Sublime Text'\" , \"-HostProfileId\" , \"subl\" , \"-HostVersion\" , \"1.0.0\" , \"-AdditionalModules\" , \"@()\" , \"-BundledModulesPath\" , \"PATH/TO/PowerShellEditorServices\" , \"-Stdio\" ], \"languageId\" : \"powershell\" , \"scopes\" : [ \"source.powershell\" ], \"syntaxes\" : [ \"Packages/PowerShell/Support/PowershellSyntax.tmLanguage\" ] } } } For more details see this issue .","title":"PowerShell"},{"location":"language_servers/#python","text":"There are multiple options:","title":"Python"},{"location":"language_servers/#pyright","text":"Follow installation instructions on LSP-pyright .","title":"Pyright"},{"location":"language_servers/#python-lsp-server","text":"pip install 'python-lsp-server[all]' Make sure you can run pylsp in your terminal. If you've installed it into a virtualenv, you might need to override the path to pylsp in global LSP settings (Package Settings -> LSP -> Settings): Sublime Text 4 { \"clients\" : { \"pylsp\" : { \"enabled\" : true , \"command\" : [ \"pylsp\" ], // \"command\" : [ \"/Users/mike/.virtualenvs/pylsp-virtual-env/bin/pylsp\" ], // example pa t h , adjus t i t f or your use case \"selector\" : \"source.python\" } } } Sublime Text 3 { \"clients\" : { \"pylsp\" : { \"enabled\" : true , \"command\" : [ \"pylsp\" ], // \"command\" : [ \"/Users/mike/.virtualenvs/pylsp-virtual-env/bin/pylsp\" ], // example pa t h , adjus t i t f or your use case \"languageId\" : \"python\" , \"scopes\" : [ \"source.python\" ], \"syntaxes\" : [ \"Packages/Python/Python.sublime-syntax\" , \"Packages/MagicPython/grammars/MagicPython.tmLanguage\" , \"Packages/Djaneiro/Syntaxes/Python Django.tmLanguage\" ] } } } If you use a virtualenv for your current project, add a path to it in your project configuration (Project -> Edit Project): { \"settings\" : { \"LSP\" : { \"pylsp\" : { \"enabled\" : true , // i f you wa nt t o e na ble Py t ho n La n guage Server f or curre nt projec t o nl y \"env\" : { // example pa t h , adjus t i t f or your use case // i t nee ds t o be a n absolu te pa t h , ne i t her $HOME n or ~ work here \"PYTHONPATH\" : \"/Users/mike/.virtualenvs/my-virtual-env/lib/python3.7/site-packages\" } } } } } A basic configuration below can be used for bootstrapping your own: \"pylsp\" : { \"enabled\" : true , \"command\" : [ \"pylsp\" ], \"settings\" : { \"pylsp.env\" : { // Maki n g Sublime's ow n libs available t o t he li nters . // \"PYTHONPATH\" : \"/Applications/Sublime Text.app/Contents/MacOS/Lib/python33\" , }, // Co nf igura t io n is compu te d f irs t fr om user co nf igura t io n (i n home direc t ory) , // overridde n by co nf igura t io n passed i n by t he la n guage clie nt , // a n d t he n overridde n by co nf igura t io n discovered i n t he workspace. \"pylsp.configurationSources\" : [ \"pycodestyle\" , // discovered i n ~/.co nf ig/pycodes t yle , se tu p.c f g , t ox.i n i a n d pycodes t yle.c f g // \"flake8\" , // discovered i n ~/.co nf ig/ fla ke 8 , se tu p.c f g , t ox.i n i a n d fla ke 8. c f g ], \"pylsp.plugins.jedi.extra_paths\" : [ // The direc t ory where t he pip i nstallat io n package is loca te d ], // E na ble fu zzy ma t ches whe n reques t i n g au t ocomple te \"pylsp.plugins.jedi.jedi_completion.fuzzy\" : true , \"pylsp.plugins.jedi.pycodestyle.enabled\" : true , \"pylsp.plugins.jedi.pycodestyle.exclude\" : [ // Exclude f iles or direc t ories which ma t ch t hese pa tterns ], \"pylsp.plugins.jedi.pycodestyle.ignore\" : [ // Exclude f iles or direc t ories which ma t ch t hese pa tterns ], // \"pylsp.plugins.jedi.pycodestyle.maxLineLength: 80\" // se t maximum allowed li ne le n g t h \"pylsp.plugins.pydocstyle.enabled\" : false , \"pylsp.plugins.pyflakes.enabled\" : true , \"pylsp.plugins.pylint.enabled\" : false , \"pylsp.plugins.yapf.enabled\" : true , // pylsp' 3 rd Par t y Plugi ns , Mypy t ype checki n g f or Py t ho n 3 , Mus t be i nstalle d via pip be f ore e na bli n g \"pylsp.plugins.pyls_mypy.enabled\" : false , // I nstall wi t h : pip i nstall pyls - mypy \"pylsp.plugins.pyls_mypy.live_mode\" : true } } Documentation: github:python-lsp/python-lsp-server . List of all built-in settings .","title":"Python LSP Server"},{"location":"language_servers/#r","text":"Follow installation instructions on R-IDE .","title":"R"},{"location":"language_servers/#ruby-ruby-on-rails","text":"There are multiple options:","title":"Ruby / Ruby on Rails"},{"location":"language_servers/#solargraph","text":"Install solargraph . Open Preferences > Package Settings > LSP > Settings and add the \"ruby\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"ruby\" : { \"enabled\" : true , \"command\" : [ \"solargraph\" , \"stdio\" ], \"selector\" : \"source.ruby | text.html.ruby\" , \"initializationOptions\" : { \"diagnostics\" : false } } } } Sublime Text 3 { \"clients\" : { \"ruby\" : { \"enabled\" : true , \"command\" : [ \"solargraph\" , \"stdio\" ], \"languageId\" : \"ruby\" , \"scopes\" : [ \"source.ruby\" , \"source.ruby.rails\" , \"text.html.ruby\" ], \"syntaxes\" : [ \"Packages/Ruby/Ruby.sublime-syntax\" , \"Packages/Rails/Ruby on Rails.sublime-syntax\" , \"Packages/Rails/HTML (Rails).sublime-syntax\" ], \"initializationOptions\" : { \"diagnostics\" : false } } } }","title":"Solargraph"},{"location":"language_servers/#sorbet","text":"Install the sorbet and sorbet-runtime gem (see github:sorbet/sorbet ): gem install sorbet gem install sorbet-runtime If you have a Gemfile, using bundler, add sorbet and sorbet-runtime to your Gemfile and run: bundle install Open Preferences > Package Settings > LSP > Settings and add the \"sorbet\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"sorbet\" : { \"enabled\" : true , \"command\" : [ \"srb\" , \"tc\" , \"--typed\" , \"true\" , \"--enable-all-experimental-lsp-features\" , \"--lsp\" , \"--disable-watchman\" ], \"selector\" : \"source.ruby | text.html.ruby\" , } } } Sublime Text 3 { \"clients\" : { \"sorbet\" : { \"enabled\" : true , \"command\" : [ \"srb\" , \"tc\" , \"--typed\" , \"true\" , \"--enable-all-experimental-lsp-features\" , \"--lsp\" , \"--disable-watchman\" ], \"languageId\" : \"ruby\" , \"scopes\" : [ \"source.ruby\" , \"source.ruby.rails\" , \"text.html.ruby\" ], \"syntaxes\" : [ \"Packages/Ruby/Ruby.sublime-syntax\" , \"Packages/Rails/Ruby on Rails.sublime-syntax\" , \"Packages/Rails/HTML (Rails).sublime-syntax\" ], } } }","title":"Sorbet"},{"location":"language_servers/#rust","text":"There are multiple options:","title":"Rust"},{"location":"language_servers/#rust-analyzer","text":"Download a binary from the release page of rust-analyzer . Rename the binary to rust-analyzer . Make sure the binary is in your $PATH . Open Preferences > Package Settings > LSP > Settings and add the \"rust-analyzer\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"rust-analyzer\" : { \"enabled\" : true , \"command\" : [ \"rust-analyzer\" ], \"selector\" : \"source.rust\" } } } Sublime Text 3 { \"clients\" : { \"rust-analyzer\" : { \"enabled\" : true , \"command\" : [ \"rust-analyzer\" ], \"languageId\" : \"rust\" , \"scopes\" : [ \"source.rust\" ], \"syntaxes\" : [ \"Packages/Rust/Rust.sublime-syntax\" , \"Packages/Rust Enhanced/RustEnhanced.sublime-syntax\" ] } } }","title":"Rust Analyzer"},{"location":"language_servers/#rust-enhanced","text":"Follow installation instructions on Rust Enhanced .","title":"Rust Enhanced"},{"location":"language_servers/#scala","text":"Follow installation instructions on LSP-metals .","title":"Scala"},{"location":"language_servers/#stylelint","text":"Follow installation instructions on LSP-stylelint .","title":"Stylelint"},{"location":"language_servers/#svelte","text":"Follow installation instructions on LSP-svelte .","title":"Svelte"},{"location":"language_servers/#swift","text":"Install the Swift package from Package Control for syntax highlighting. Install Xcode 11.4 or later and ensure that xcrun -find sourcekit-lsp returns the path to sourcekit-lsp. Open Preferences > Package Settings > LSP > Settings and add the \"sourcekit-lsp\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"sourcekit-lsp\" : { \"enabled\" : true , \"command\" : [ \"xcrun\" , \"sourcekit-lsp\" ], \"selector\" : \"source.swift\" } } } Sublime Text 3 { \"clients\" : { \"sourcekit-lsp\" : { \"enabled\" : true , \"command\" : [ \"xcrun\" , \"sourcekit-lsp\" ], \"languageId\" : \"swift\" , \"scopes\" : [ \"source.swift\" ], \"syntaxes\" : [ \"Packages/Swift/Syntaxes/Swift.tmLanguage\" ] } } }","title":"Swift"},{"location":"language_servers/#tagml","text":"Follow installation instructions on LSP-tagml .","title":"TAGML"},{"location":"language_servers/#terraform","text":"Install the Terraform package from Package Control for syntax highlighting. Download terraform-lsp binary and make it available in your PATH. Open Preferences > Package Settings > LSP > Settings and add the \"terraform\" client configuration to the \"clients\" : Sublime Text 4 { \"clients\" : { \"terraform\" : { \"enabled\" : true , \"command\" : [ \"terraform-lsp\" ], \"selector\" : \"source.terraform\" } } } Sublime Text 3 { \"clients\" : { \"terraform\" : { \"enabled\" : true , \"command\" : [ \"terraform-lsp\" ], \"languageId\" : \"terraform\" , \"scopes\" : [ \"source.terraform\" ], \"syntaxes\" : [ \"Packages/Terraform/Terraform.sublime-syntax\" ] } } }","title":"Terraform"},{"location":"language_servers/#typescript-javascript","text":"Follow installation instructions on LSP-typescript .","title":"TypeScript / JavaScript"},{"location":"language_servers/#vue","text":"Follow installation instructions on LSP-vue .","title":"Vue"},{"location":"language_servers/#xml","text":"Follow installation instructions on LSP-lemminx .","title":"XML"},{"location":"language_servers/#yaml","text":"Follow installation instructions on LSP-yaml .","title":"YAML"},{"location":"lsp_implementation_status/","text":"LSP specification implementation status # Text Document Capabilities # \u2705 synchronization \u2705 didOpen \u2705 didChange \u2705 Full text sync \u2705 Incremental text sync \u2705 willSave \u2705 willSaveWaitUntil \u2705 didSave \u2705 Include text \u2705 didClose \u2705 completion \u2705 insertText \u2705 textEdit \u274c prefix filter textEdit \u2705 documentation (both static and from completionItem/resolve) \u2705 Run command after inserting completion \u274c insertReplaceEdit variant \u2705 hover \u2705 signatureHelp \u274c context \u2705 declaration \u2705 link support \u2705 definition \u2705 link support \u2705 typeDefinition \u2705 link support \u2705 implementation \u2705 link support \u2705 references \u2705 documentHighlight \u2705 documentSymbol \u2705 codeAction \u2705 resolve \u2705 codeLens ( only when backed by a helper package ) \u274c documentLink \u2705 colorProvider \u274c color picker #1291 \u2705 formatting \u2705 rangeFormatting \u274c onTypeFormatting \u2705 rename \u2705 publishDiagnostics \u274c foldingRange sublimehq/sublime_text#3389 \u2705 selectionRange \u274c semanticHighlighting #887 , sublimehq/sublime_text#817 \u274c callHierarchy Workspace Capabilities # \u2705 applyEdit \u2705 workspaceEdit \u2705 documentChanges \u274c resourceOperations \u274c failureHandling \u2705 didChangeConfiguration \u274c didChangeWatchedFiles #892 , sublimehq/sublime_text#2669 \u2705 symbol \u2705 executeCommand Window Capabilities # \u2705 workDoneProgress \u2705 create \u274c cancel \u2705 showMessage request additionalPropertiesSupport Dynamic Registration # \u2705 Fully implemented","title":"LSP implementation status"},{"location":"lsp_implementation_status/#lsp-specification-implementation-status","text":"","title":"LSP specification implementation status"},{"location":"lsp_implementation_status/#text-document-capabilities","text":"\u2705 synchronization \u2705 didOpen \u2705 didChange \u2705 Full text sync \u2705 Incremental text sync \u2705 willSave \u2705 willSaveWaitUntil \u2705 didSave \u2705 Include text \u2705 didClose \u2705 completion \u2705 insertText \u2705 textEdit \u274c prefix filter textEdit \u2705 documentation (both static and from completionItem/resolve) \u2705 Run command after inserting completion \u274c insertReplaceEdit variant \u2705 hover \u2705 signatureHelp \u274c context \u2705 declaration \u2705 link support \u2705 definition \u2705 link support \u2705 typeDefinition \u2705 link support \u2705 implementation \u2705 link support \u2705 references \u2705 documentHighlight \u2705 documentSymbol \u2705 codeAction \u2705 resolve \u2705 codeLens ( only when backed by a helper package ) \u274c documentLink \u2705 colorProvider \u274c color picker #1291 \u2705 formatting \u2705 rangeFormatting \u274c onTypeFormatting \u2705 rename \u2705 publishDiagnostics \u274c foldingRange sublimehq/sublime_text#3389 \u2705 selectionRange \u274c semanticHighlighting #887 , sublimehq/sublime_text#817 \u274c callHierarchy","title":"Text Document Capabilities"},{"location":"lsp_implementation_status/#workspace-capabilities","text":"\u2705 applyEdit \u2705 workspaceEdit \u2705 documentChanges \u274c resourceOperations \u274c failureHandling \u2705 didChangeConfiguration \u274c didChangeWatchedFiles #892 , sublimehq/sublime_text#2669 \u2705 symbol \u2705 executeCommand","title":"Workspace Capabilities"},{"location":"lsp_implementation_status/#window-capabilities","text":"\u2705 workDoneProgress \u2705 create \u274c cancel \u2705 showMessage request additionalPropertiesSupport","title":"Window Capabilities"},{"location":"lsp_implementation_status/#dynamic-registration","text":"\u2705 Fully implemented","title":"Dynamic Registration"},{"location":"troubleshooting/","text":"Self-help instructions # Enable LSP logging: In LSP Settings enable the log_debug setting. Enable server logging: set log_server to [\"panel\"] Run \"LSP: Toggle Log Panel\" from the command palette. No restart is needed. If you believe the issue is with this package, please include the output from the Sublime console in your issue report! Updating the PATH used by LSP servers # You can confirm that your issue is due to PATH being different by starting Sublime Text from the command line so that it inherits your shell's environment. The solution is to make ST read the same PATH that is read by your shell (or OS in general, in case of Windows). Note : You can see what ST thinks your PATH is by opening the ST console by clicking on View > Show Console , and running import os; os.environ[\"PATH\"] in that console. Adjusting PATH can differ based on the operating system and the default shell used. Refer to the following table on where this can be adjusted: Windows Open Start Menu, type \"environment\" and select \"Edit environment variables for your account\". Modify the \"Path\" variable so that it includes the directory path to the program of your choice. macOS Depending on your default shell, edit: ~/.profile (bash), ~/.zprofile (zsh) or ~/.config/fish/config.fish (fish). Linux Edit ~/.profile . Note : It might be necessary to re-login your user account after changing the shell initialization script for the changes to be picked up. Another solution could be (at least on Linux) to update the server PATH using the env parameter in your LSP configuration file. The following template can be used where: - <your_language_server_name> is the server name - <added_path> is the directory needed for the server to behave correctly \"<your_language_server_name>\" : { // ... \"env\" : { \"PATH\" : \"<added_path>:/usr/local/bin\" } } Common problems # 1. LSP doesn't start my language server # Make sure you have a folder added in your Sublime workspace. Make sure the document you are opening lives under that folder. Your client configuration requires two settings to match the document your are editing: Scope (eg. source.php ): Verify this is correct by running \"Show Scope Name\" from the developer menu. Syntax (eg. Packages\\PHP\\PHP.sublime-syntax ): Verify by running view.settings().get(\"syntax\") in the console. 2. LSP cannot find my language server ( No such file or directory: 'xyz' ) # Assuming that the server is actually installed, and that you can start it from your shell, this issue is likely due to Sublime Text's internal environment not picking up the same PATH environment variable as you've configured in your shell. The exact changes to make can differ depending on what program you want to expose to Sublime Text. The simplest way is to extend the path like so (replacing /usr/local/bin with the path of your choice): export PATH = \"/usr/local/bin: $PATH \" If, for example, you want to expose a Node binary to ST and you have it installed through a version manager like nvm , you need to insert its initialization script in the location specified in this table The complete procedure of updating the PATH used by Sublime Text depends on your platform and is explained here . 3. Popup error Language server <your_server_language_name> has crashed # Assuming that the server is actually installed, and that you can start it from your shell, this issue is likely due to Sublime Text's internal environment not picking up the same PATH environment variable as you've configured in your shell. Note : Language servers may have dependencies that should also be in your PATH in addition to the server binary itself. For instance if you have installed the haskell-language-server using ghcup-hs you should expose its specific installation folder ~/.ghcup/bin . If the build process uses stack then it should also be in your PATH . The complete procedure of updating the PATH used by Sublime Text depends on your platform and is explained here . Known Issues # Completions not shown after certain keywords # Sublime Text's built-in Completion Rules.tmPreferences for some languages surpress completions after certain keywords. Python's import keyword is an example - no completions are shown at import a| (See this LSP issue ). The solution is to put an edited version of the Completion Rules.tmPreferences in the Packages folder (you may need to clear the copy in the Cache folder afterwards). More details on workaround and a final fix for Lua","title":"Troubleshooting"},{"location":"troubleshooting/#self-help-instructions","text":"Enable LSP logging: In LSP Settings enable the log_debug setting. Enable server logging: set log_server to [\"panel\"] Run \"LSP: Toggle Log Panel\" from the command palette. No restart is needed. If you believe the issue is with this package, please include the output from the Sublime console in your issue report!","title":"Self-help instructions"},{"location":"troubleshooting/#updating-the-path-used-by-lsp-servers","text":"You can confirm that your issue is due to PATH being different by starting Sublime Text from the command line so that it inherits your shell's environment. The solution is to make ST read the same PATH that is read by your shell (or OS in general, in case of Windows). Note : You can see what ST thinks your PATH is by opening the ST console by clicking on View > Show Console , and running import os; os.environ[\"PATH\"] in that console. Adjusting PATH can differ based on the operating system and the default shell used. Refer to the following table on where this can be adjusted: Windows Open Start Menu, type \"environment\" and select \"Edit environment variables for your account\". Modify the \"Path\" variable so that it includes the directory path to the program of your choice. macOS Depending on your default shell, edit: ~/.profile (bash), ~/.zprofile (zsh) or ~/.config/fish/config.fish (fish). Linux Edit ~/.profile . Note : It might be necessary to re-login your user account after changing the shell initialization script for the changes to be picked up. Another solution could be (at least on Linux) to update the server PATH using the env parameter in your LSP configuration file. The following template can be used where: - <your_language_server_name> is the server name - <added_path> is the directory needed for the server to behave correctly \"<your_language_server_name>\" : { // ... \"env\" : { \"PATH\" : \"<added_path>:/usr/local/bin\" } }","title":"Updating the PATH used by LSP servers"},{"location":"troubleshooting/#common-problems","text":"","title":"Common problems"},{"location":"troubleshooting/#1-lsp-doesnt-start-my-language-server","text":"Make sure you have a folder added in your Sublime workspace. Make sure the document you are opening lives under that folder. Your client configuration requires two settings to match the document your are editing: Scope (eg. source.php ): Verify this is correct by running \"Show Scope Name\" from the developer menu. Syntax (eg. Packages\\PHP\\PHP.sublime-syntax ): Verify by running view.settings().get(\"syntax\") in the console.","title":"1. LSP doesn't start my language server"},{"location":"troubleshooting/#2-lsp-cannot-find-my-language-server-no-such-file-or-directory-xyz","text":"Assuming that the server is actually installed, and that you can start it from your shell, this issue is likely due to Sublime Text's internal environment not picking up the same PATH environment variable as you've configured in your shell. The exact changes to make can differ depending on what program you want to expose to Sublime Text. The simplest way is to extend the path like so (replacing /usr/local/bin with the path of your choice): export PATH = \"/usr/local/bin: $PATH \" If, for example, you want to expose a Node binary to ST and you have it installed through a version manager like nvm , you need to insert its initialization script in the location specified in this table The complete procedure of updating the PATH used by Sublime Text depends on your platform and is explained here .","title":"2. LSP cannot find my language server (No such file or directory: 'xyz')"},{"location":"troubleshooting/#3-popup-error-language-server-your_server_language_name-has-crashed","text":"Assuming that the server is actually installed, and that you can start it from your shell, this issue is likely due to Sublime Text's internal environment not picking up the same PATH environment variable as you've configured in your shell. Note : Language servers may have dependencies that should also be in your PATH in addition to the server binary itself. For instance if you have installed the haskell-language-server using ghcup-hs you should expose its specific installation folder ~/.ghcup/bin . If the build process uses stack then it should also be in your PATH . The complete procedure of updating the PATH used by Sublime Text depends on your platform and is explained here .","title":"3. Popup error Language server &lt;your_server_language_name&gt; has crashed"},{"location":"troubleshooting/#known-issues","text":"","title":"Known Issues"},{"location":"troubleshooting/#completions-not-shown-after-certain-keywords","text":"Sublime Text's built-in Completion Rules.tmPreferences for some languages surpress completions after certain keywords. Python's import keyword is an example - no completions are shown at import a| (See this LSP issue ). The solution is to put an edited version of the Completion Rules.tmPreferences in the Packages folder (you may need to clear the copy in the Cache folder afterwards). More details on workaround and a final fix for Lua","title":"Completions not shown after certain keywords"},{"location":"guides/client_configuration/","text":"Client Configuration # After you have installed a language server, the LSP settings need to be configured to enable communication between LSP and that server for suitable filetypes. LSP ships with default configurations for a few language servers, but these need to be enabled before they will start. To globally enable a server, open the Command Palette and choose \"LSP: Enable Language Server Globally\". This will add \"enabled\": true to the corresponding language server setting under the \"clients\" key in your user-settings file for LSP. Your user-settings file is stored at Packages/User/LSP.sublime-settings and can be opened via \"Preferences > Package Settings > LSP > Settings\" from the menu. If your language server is missing or not configured correctly, you need to add/override further settings which are explained below. Here is an example of the LSP.sublime-settings file with configurations for the JavaScript/TypeScript server: { // General settings \"show_diagnostics_panel_on_save\" : 0 , // Language server configurations \"clients\" : { \"lsp-tsserver\" : { \"command\" : [ \"lsp-tsserver\" ], \"enabled\" : true , \"languageId\" : \"typescript\" , \"document_selector\" : \"source.ts | source.tsx\" } } } Some language servers support multiple languages, which can be specified in the following way: { // General settings \"show_diagnostics_panel_on_save\" : 0 , // Language server configurations \"clients\" : { \"lsp-tsserver\" : { \"command\" : [ \"lsp-tsserver\" ], \"enabled\" : true , \"languages\" : [{ \"languageId\" : \"javascript\" , \"document_selector\" : \"source.js | source.jsx\" }, { \"languageId\" : \"typescript\" , \"document_selector\" : \"source.ts | source.tsx\" }] } } } Setting Description enabled enables a language server (default is disabled) command must be on PATH or specify a full path, add arguments (can be empty if starting manually, then TCP transport must be configured) env dict of environment variables to be injected into the language server's process (eg. PYTHONPATH) settings per-project settings (equivalent to VS Code's Workspace Settings) initializationOptions options to send to the server at startup (rarely used) document_selector This is the connection between your files and language servers. It's a selector that is matched against the current view's base scope. If the selector matches with the base scope of the the file, the associated language server is started. If the selector happens to be of the form \"source.{languageId}\" (which it is in many cases), then you can omit this \"document_selector\" key altogether, and LSP will assume the selector is \"source.{languageId}\". For more information, see https://www.sublimetext.com/docs/3/selectors.html feature_selector Used to prioritize a certain language server when choosing which one to query on views with multiple servers active. Certain LSP actions have to pick which server to query and this setting can be used to decide which one to pick based on the current scopes at the cursor location. For example when having both HTML and PHP servers running on a PHP file, this can be used to give priority to the HTML one in HTML blocks and to PHP one otherwise. That would be done by setting \"feature_selector\" to text.html for HTML server and source.php to PHP server. Note: when the \"feature_selector\" is missing, it will be the same as the \"document_selector\". languageId identifies the language for a document - see LSP specifications languages group document_selector and languageId together for servers that support more than one language tcp_port see instructions below tcp_host see instructions below tcp_mode see instructions below experimental_capabilities Turn on experimental capabilities of a language server. This is a dictionary and differs per language server You can figure out the scope with Tools > Developer > Show Scope Name. You can figure out the syntax by opening the ST console and running view.settings().get(\"syntax\") . The default transport is stdio, but TCP is also supported. The port number can be inserted into the server's arguments by adding a {port} placeholder in command . Server-owned port Set tcp_port and optionally tcp_host if server running on another host. Editor-owned port (servers based on vscode-languageserver-node): Set tcp_mode to \"host\", leave tcp_port unset for automatic port selection. tcp_port can be set if eg. debugging a server. You may want to check out the LSP source and extend the TCP_CONNECT_TIMEOUT . Per-project overrides # Global LSP settings (which currently are lsp_format_on_save and lsp_code_actions_on_save ) can be overridden per-project in .sublime-project file: { \"folders\" : [ { \"path\" : \".\" } ], \"settings\" : { \"lsp_format_on_save\" : true , } } Also global language server settings can be added or overridden per-project by adding an LSP object within the settings object. A new server configurations can be added there or existing global configurations can be overridden (either fully or partially). Those can override server configurations defined within the clients key in LSP.sublime-settings or those provided by external packages. Note : The settings and initializationOptions objects for server configurations will be merged with globally defined server configurations so it's possible to override only certain properties from those objects. { \"folders\" : [ { \"path\" : \".\" } ], \"settings\" : { \"LSP\" : { \"jsts\" : { \"enabled\" : false , }, \"eslint\" : { \"settings\" : { \"eslint.autoFixOnSave\" : true // This proper t y will be merged wi t h origi nal se tt i n gs f or // t his clie nt (po tent ially overridi n g origi nal value). } } } } }","title":"Client Configuration"},{"location":"guides/client_configuration/#client-configuration","text":"After you have installed a language server, the LSP settings need to be configured to enable communication between LSP and that server for suitable filetypes. LSP ships with default configurations for a few language servers, but these need to be enabled before they will start. To globally enable a server, open the Command Palette and choose \"LSP: Enable Language Server Globally\". This will add \"enabled\": true to the corresponding language server setting under the \"clients\" key in your user-settings file for LSP. Your user-settings file is stored at Packages/User/LSP.sublime-settings and can be opened via \"Preferences > Package Settings > LSP > Settings\" from the menu. If your language server is missing or not configured correctly, you need to add/override further settings which are explained below. Here is an example of the LSP.sublime-settings file with configurations for the JavaScript/TypeScript server: { // General settings \"show_diagnostics_panel_on_save\" : 0 , // Language server configurations \"clients\" : { \"lsp-tsserver\" : { \"command\" : [ \"lsp-tsserver\" ], \"enabled\" : true , \"languageId\" : \"typescript\" , \"document_selector\" : \"source.ts | source.tsx\" } } } Some language servers support multiple languages, which can be specified in the following way: { // General settings \"show_diagnostics_panel_on_save\" : 0 , // Language server configurations \"clients\" : { \"lsp-tsserver\" : { \"command\" : [ \"lsp-tsserver\" ], \"enabled\" : true , \"languages\" : [{ \"languageId\" : \"javascript\" , \"document_selector\" : \"source.js | source.jsx\" }, { \"languageId\" : \"typescript\" , \"document_selector\" : \"source.ts | source.tsx\" }] } } } Setting Description enabled enables a language server (default is disabled) command must be on PATH or specify a full path, add arguments (can be empty if starting manually, then TCP transport must be configured) env dict of environment variables to be injected into the language server's process (eg. PYTHONPATH) settings per-project settings (equivalent to VS Code's Workspace Settings) initializationOptions options to send to the server at startup (rarely used) document_selector This is the connection between your files and language servers. It's a selector that is matched against the current view's base scope. If the selector matches with the base scope of the the file, the associated language server is started. If the selector happens to be of the form \"source.{languageId}\" (which it is in many cases), then you can omit this \"document_selector\" key altogether, and LSP will assume the selector is \"source.{languageId}\". For more information, see https://www.sublimetext.com/docs/3/selectors.html feature_selector Used to prioritize a certain language server when choosing which one to query on views with multiple servers active. Certain LSP actions have to pick which server to query and this setting can be used to decide which one to pick based on the current scopes at the cursor location. For example when having both HTML and PHP servers running on a PHP file, this can be used to give priority to the HTML one in HTML blocks and to PHP one otherwise. That would be done by setting \"feature_selector\" to text.html for HTML server and source.php to PHP server. Note: when the \"feature_selector\" is missing, it will be the same as the \"document_selector\". languageId identifies the language for a document - see LSP specifications languages group document_selector and languageId together for servers that support more than one language tcp_port see instructions below tcp_host see instructions below tcp_mode see instructions below experimental_capabilities Turn on experimental capabilities of a language server. This is a dictionary and differs per language server You can figure out the scope with Tools > Developer > Show Scope Name. You can figure out the syntax by opening the ST console and running view.settings().get(\"syntax\") . The default transport is stdio, but TCP is also supported. The port number can be inserted into the server's arguments by adding a {port} placeholder in command . Server-owned port Set tcp_port and optionally tcp_host if server running on another host. Editor-owned port (servers based on vscode-languageserver-node): Set tcp_mode to \"host\", leave tcp_port unset for automatic port selection. tcp_port can be set if eg. debugging a server. You may want to check out the LSP source and extend the TCP_CONNECT_TIMEOUT .","title":"Client Configuration"},{"location":"guides/client_configuration/#per-project-overrides","text":"Global LSP settings (which currently are lsp_format_on_save and lsp_code_actions_on_save ) can be overridden per-project in .sublime-project file: { \"folders\" : [ { \"path\" : \".\" } ], \"settings\" : { \"lsp_format_on_save\" : true , } } Also global language server settings can be added or overridden per-project by adding an LSP object within the settings object. A new server configurations can be added there or existing global configurations can be overridden (either fully or partially). Those can override server configurations defined within the clients key in LSP.sublime-settings or those provided by external packages. Note : The settings and initializationOptions objects for server configurations will be merged with globally defined server configurations so it's possible to override only certain properties from those objects. { \"folders\" : [ { \"path\" : \".\" } ], \"settings\" : { \"LSP\" : { \"jsts\" : { \"enabled\" : false , }, \"eslint\" : { \"settings\" : { \"eslint.autoFixOnSave\" : true // This proper t y will be merged wi t h origi nal se tt i n gs f or // t his clie nt (po tent ially overridi n g origi nal value). } } } } }","title":"Per-project overrides"},{"location":"guides/cplusplus/","text":"Setup C/C++ # The below was written for clangd, but much applies to cquery and ccls as well. CCLS # Build and install from source or download for your distribution. See the ccls wiki for more details. Clangd # To use clangd on Debian/Ubuntu, add the apt repositories described here . After that, install with e.g. apt install clang-tools-9 . The clangd executable will have a version number suffix. For instance, clangd-9. You will thus have to adjust your \"clients\" dictionary in your user preferences. To use clangd on Mac, use Homebrew: brew install llvm . The clangd executable will be present in /usr/local/Cellar/llvm/ version /bin You probably need to install the Xcode developer command-line tools. Run the following in a terminal: xcode-select --install And if you're on macOS 10.14, also run the following to install essential headers like wchar_t.h : open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg To use clangd on Windows, install LLVM with the LLVM installer , and then add C:\\Program Files\\LLVM\\bin to your %PATH%. Compilation database # For any project of non-trivial size, you probably have a build system in place to compile your source files. The compilation command passed to your compiler might include things like: Include directories, Define directives, Compiler-specific flags. compile_commands.json # Like any language server, clangd works on a per-file (or per-buffer) basis. But unlike most other language servers, it must also be aware of the exact compile flags that you pass to your compiler. For this reason, people have come up with the idea of a compilation database . At this time, this is just a simple JSON file that describes for each translation unit (i.e. a .cpp , .c , .m or .mm file) the exact compilation flags that you pass to your compiler. It's pretty much standardized that this file should be called compile_commands.json . clangd searches for this file up in parent directories from the currently active document . If you don't have such a file present, most likely clangd will spit out nonsense errors and diagnostics about your code. As it turns out, CMake can generate this file for you if you pass it the cache variable -DCMAKE_EXPORT_COMPILE_COMMANDS=ON when invoking CMake. It will be present in your build directory, and you can copy that file to the root of your project. Make sure to ignore this file in your version control system. If you are using a make-based build system, you could use compiledb to generate a compile_commands.json . Since header files are (usually) not passed to a compiler, they don't have compile commands. So even with a compilation database in place, clangd will still spit out nonsense in header files. You can try to remedy this by enhancing your compilation database with your header files using this project called compdb . To generate headers with compdb, read this closed issue . You can also read about attempts to address this on the CMake issue tracker , along with the problem of treating header files as translation units. compile_flags.txt # Another way to let your language server know what the include dirs are is by hand-writing a compile_flags.txt file in your source root. Each line is one flag. This can be useful for projects that e.g. only have a Visual Studio solution file. For more information, see these instructions . Creating this file by hand is a reasonable place to start if your project is quite simple.","title":"Setup C/C++"},{"location":"guides/cplusplus/#setup-cc","text":"The below was written for clangd, but much applies to cquery and ccls as well.","title":"Setup C/C++"},{"location":"guides/cplusplus/#ccls","text":"Build and install from source or download for your distribution. See the ccls wiki for more details.","title":"CCLS"},{"location":"guides/cplusplus/#clangd","text":"To use clangd on Debian/Ubuntu, add the apt repositories described here . After that, install with e.g. apt install clang-tools-9 . The clangd executable will have a version number suffix. For instance, clangd-9. You will thus have to adjust your \"clients\" dictionary in your user preferences. To use clangd on Mac, use Homebrew: brew install llvm . The clangd executable will be present in /usr/local/Cellar/llvm/ version /bin You probably need to install the Xcode developer command-line tools. Run the following in a terminal: xcode-select --install And if you're on macOS 10.14, also run the following to install essential headers like wchar_t.h : open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg To use clangd on Windows, install LLVM with the LLVM installer , and then add C:\\Program Files\\LLVM\\bin to your %PATH%.","title":"Clangd"},{"location":"guides/cplusplus/#compilation-database","text":"For any project of non-trivial size, you probably have a build system in place to compile your source files. The compilation command passed to your compiler might include things like: Include directories, Define directives, Compiler-specific flags.","title":"Compilation database"},{"location":"guides/cplusplus/#compile_commandsjson","text":"Like any language server, clangd works on a per-file (or per-buffer) basis. But unlike most other language servers, it must also be aware of the exact compile flags that you pass to your compiler. For this reason, people have come up with the idea of a compilation database . At this time, this is just a simple JSON file that describes for each translation unit (i.e. a .cpp , .c , .m or .mm file) the exact compilation flags that you pass to your compiler. It's pretty much standardized that this file should be called compile_commands.json . clangd searches for this file up in parent directories from the currently active document . If you don't have such a file present, most likely clangd will spit out nonsense errors and diagnostics about your code. As it turns out, CMake can generate this file for you if you pass it the cache variable -DCMAKE_EXPORT_COMPILE_COMMANDS=ON when invoking CMake. It will be present in your build directory, and you can copy that file to the root of your project. Make sure to ignore this file in your version control system. If you are using a make-based build system, you could use compiledb to generate a compile_commands.json . Since header files are (usually) not passed to a compiler, they don't have compile commands. So even with a compilation database in place, clangd will still spit out nonsense in header files. You can try to remedy this by enhancing your compilation database with your header files using this project called compdb . To generate headers with compdb, read this closed issue . You can also read about attempts to address this on the CMake issue tracker , along with the problem of treating header files as translation units.","title":"compile_commands.json"},{"location":"guides/cplusplus/#compile_flagstxt","text":"Another way to let your language server know what the include dirs are is by hand-writing a compile_flags.txt file in your source root. Each line is one flag. This can be useful for projects that e.g. only have a Visual Studio solution file. For more information, see these instructions . Creating this file by hand is a reasonable place to start if your project is quite simple.","title":"compile_flags.txt"}]}